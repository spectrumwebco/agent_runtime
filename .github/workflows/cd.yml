name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-fluxcd:
    name: Deploy with FluxCD
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Flux CLI
        uses: fluxcd/flux2/action@main

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.0'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Check Flux installation
        run: flux check --pre

      - name: Create Flux manifests
        run: |
          mkdir -p ./flux-system
          flux install --export > ./flux-system/gotk-components.yaml
          
          # Create Flux kustomization for agent-runtime
          cat > ./flux-system/agent-runtime-kustomization.yaml <<EOF
          apiVersion: kustomize.toolkit.fluxcd.io/v1
          kind: Kustomization
          metadata:
            name: agent-runtime
            namespace: flux-system
          spec:
            interval: 1m0s
            path: ./k8s
            prune: true
            sourceRef:
              kind: GitRepository
              name: agent-runtime
            validation: client
          EOF
          
          # Create Flux GitRepository source
          cat > ./flux-system/agent-runtime-source.yaml <<EOF
          apiVersion: source.toolkit.fluxcd.io/v1
          kind: GitRepository
          metadata:
            name: agent-runtime
            namespace: flux-system
          spec:
            interval: 1m0s
            url: https://github.com/${{ github.repository }}.git
            ref:
              branch: main
          EOF

      - name: Apply Flux manifests
        run: |
          kubectl apply -f ./flux-system/gotk-components.yaml
          kubectl apply -f ./flux-system/agent-runtime-source.yaml
          kubectl apply -f ./flux-system/agent-runtime-kustomization.yaml

  deploy-argocd:
    name: Deploy with ArgoCD
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.0'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Login to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

      - name: Create ArgoCD Application
        run: |
          argocd app create agent-runtime \
            --repo https://github.com/${{ github.repository }}.git \
            --path k8s \
            --dest-server https://kubernetes.default.svc \
            --dest-namespace agent-runtime-system \
            --sync-policy automated \
            --auto-prune \
            --self-heal \
            --revision main \
            --upsert

      - name: Sync ArgoCD Application
        run: |
          argocd app sync agent-runtime
          argocd app wait agent-runtime --health
