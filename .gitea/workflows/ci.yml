name: CI Pipeline

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]

jobs:
  lint:
    name: Lint
    runs-on: gitea-runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: |
          go mod download
          go install golang.org/x/lint/golint@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run golint
        run: golint -set_exit_status ./...

      - name: Run staticcheck
        run: staticcheck ./...

      - name: Run go vet
        run: go vet ./...

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        run: pip install uv

      - name: Install Python dependencies
        run: |
          uv venv
          uv pip install -r requirements.txt

      - name: Terraform Format
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: 1.5.0
          tf_actions_subcommand: 'fmt'
          tf_actions_working_dir: 'terraform'

  test:
    name: Test
    runs-on: gitea-runner
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt

  build:
    name: Build
    runs-on: gitea-runner
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build
        run: go build -v ./...

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: agent-runtime:${{ github.sha }}

  terraform-validate:
    name: Terraform Validate
    runs-on: gitea-runner
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

  k8s-manifests-validate:
    name: Kubernetes Manifests Validate
    runs-on: gitea-runner
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install kubeval
        run: |
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          sudo cp kubeval /usr/local/bin

      - name: Validate Kubernetes manifests
        run: |
          find ./k8s -name "*.yaml" -type f -exec kubeval --strict {} \;

  security-scan:
    name: Security Scan
    runs-on: gitea-runner
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
