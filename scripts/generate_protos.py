"""
Script to generate Python and Go protobuf code from proto files.

This script generates Python and Go code from the protobuf definitions
in the protos directory. It uses the protoc compiler to generate the code.
"""

import os
import subprocess
import sys
from pathlib import Path


def main():
    """Generate protobuf code for Python and Go."""
    root_dir = Path(__file__).resolve().parent.parent
    protos_dir = root_dir / "protos"
    
    python_out_dir = root_dir / "protos" / "gen" / "python"
    go_out_dir = root_dir / "protos" / "gen" / "go"
    
    os.makedirs(python_out_dir, exist_ok=True)
    os.makedirs(go_out_dir, exist_ok=True)
    
    with open(python_out_dir / "__init__.py", "w") as f:
        f.write("# Generated by generate_protos.py\n")
    
    proto_files = list(protos_dir.glob("*.proto"))
    
    if not proto_files:
        print("No proto files found in", protos_dir)
        return 1
    
    print(f"Found {len(proto_files)} proto files:")
    for proto_file in proto_files:
        print(f"  {proto_file.name}")
    
    print("\nGenerating Python code...")
    python_cmd = [
        "python", "-m", "grpc_tools.protoc",
        f"--proto_path={protos_dir}",
        f"--python_out={python_out_dir}",
        f"--grpc_python_out={python_out_dir}",
    ] + [str(f) for f in proto_files]
    
    try:
        subprocess.run(python_cmd, check=True)
        print("Python code generation successful")
    except subprocess.CalledProcessError as e:
        print(f"Error generating Python code: {e}")
        return 1
    
    print("\nGenerating Go code...")
    go_cmd = [
        "protoc",
        f"--proto_path={protos_dir}",
        f"--go_out={go_out_dir}",
        f"--go_opt=paths=source_relative",
        f"--go-grpc_out={go_out_dir}",
        f"--go-grpc_opt=paths=source_relative",
    ] + [str(f) for f in proto_files]
    
    try:
        subprocess.run(go_cmd, check=True)
        print("Go code generation successful")
    except subprocess.CalledProcessError as e:
        print(f"Error generating Go code: {e}")
        return 1
    
    print("\nProtobuf code generation completed successfully")
    return 0


if __name__ == "__main__":
    sys.exit(main())
