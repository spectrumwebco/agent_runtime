import React, { useState, createContext, useContext } from 'react';

// Teemo UI Form Validation Interaction Template
// This template provides a customizable form validation system

interface ValidationRule {
  test: (value: any) => boolean;
  message: string;
}

interface FieldConfig {
  name: string;
  initialValue: any;
  rules?: ValidationRule[];
}

interface FormContextType {
  values: Record<string, any>;
  errors: Record<string, string | null>;
  touched: Record<string, boolean>;
  handleChange: (name: string, value: any) => void;
  handleBlur: (name: string) => void;
  validateField: (name: string) => boolean;
  validateForm: () => boolean;
  resetForm: () => void;
  submitForm: () => void;
}

const FormContext = createContext<FormContextType | null>(null);

interface TeemoFormProviderProps {
  fields: FieldConfig[];
  onSubmit: (values: Record<string, any>) => void;
  children: React.ReactNode;
}

export const TeemoFormProvider: React.FC<TeemoFormProviderProps> = ({
  fields,
  onSubmit,
  children,
}) => {
  // Initialize form state
  const initialValues = fields.reduce((acc, field) => {
    acc[field.name] = field.initialValue;
    return acc;
  }, {} as Record<string, any>);

  const initialErrors = fields.reduce((acc, field) => {
    acc[field.name] = null;
    return acc;
  }, {} as Record<string, string | null>);

  const initialTouched = fields.reduce((acc, field) => {
    acc[field.name] = false;
    return acc;
  }, {} as Record<string, boolean>);

  const [values, setValues] = useState<Record<string, any>>(initialValues);
  const [errors, setErrors] = useState<Record<string, string | null>>(initialErrors);
  const [touched, setTouched] = useState<Record<string, boolean>>(initialTouched);

  // Field validation function
  const validateField = (name: string): boolean => {
    const field = fields.find((f) => f.name === name);
    
    if (!field || !field.rules) {
      return true;
    }

    const value = values[name];
    
    for (const rule of field.rules) {
      if (!rule.test(value)) {
        setErrors((prev) => ({ ...prev, [name]: rule.message }));
        return false;
      }
    }
    
    setErrors((prev) => ({ ...prev, [name]: null }));
    return true;
  };

  // Form validation function
  const validateForm = (): boolean => {
    let isValid = true;
    
    for (const field of fields) {
      const fieldIsValid = validateField(field.name);
      isValid = isValid && fieldIsValid;
      
      // Mark all fields as touched during form validation
      setTouched((prev) => ({ ...prev, [field.name]: true }));
    }
    
    return isValid;
  };

  // Handle field change
  const handleChange = (name: string, value: any) => {
    setValues((prev) => ({ ...prev, [name]: value }));
    
    // Validate field if it's been touched
    if (touched[name]) {
      validateField(name);
    }
  };

  // Handle field blur
  const handleBlur = (name: string) => {
    setTouched((prev) => ({ ...prev, [name]: true }));
    validateField(name);
  };

  // Reset form
  const resetForm = () => {
    setValues(initialValues);
    setErrors(initialErrors);
    setTouched(initialTouched);
  };

  // Submit form
  const submitForm = () => {
    const isValid = validateForm();
    
    if (isValid) {
      onSubmit(values);
    }
  };

  const contextValue: FormContextType = {
    values,
    errors,
    touched,
    handleChange,
    handleBlur,
    validateField,
    validateForm,
    resetForm,
    submitForm,
  };

  return <FormContext.Provider value={contextValue}>{children}</FormContext.Provider>;
};

// Hook to use form context
export const useTeemoForm = () => {
  const context = useContext(FormContext);
  
  if (!context) {
    throw new Error('useTeemoForm must be used within a TeemoFormProvider');
  }
  
  return context;
};

// Form field component
interface TeemoFormFieldProps {
  name: string;
  children: (props: {
    value: any;
    error: string | null;
    touched: boolean;
    onChange: (value: any) => void;
    onBlur: () => void;
  }) => React.ReactNode;
}

export const TeemoFormField: React.FC<TeemoFormFieldProps> = ({ name, children }) => {
  const { values, errors, touched, handleChange, handleBlur } = useTeemoForm();
  
  return (
    <>
      {children({
        value: values[name],
        error: errors[name],
        touched: touched[name],
        onChange: (value) => handleChange(name, value),
        onBlur: () => handleBlur(name),
      })}
    </>
  );
};

// Form submit button component
interface TeemoFormSubmitProps {
  children: React.ReactNode;
  className?: string;
  disabled?: boolean;
}

export const TeemoFormSubmit: React.FC<TeemoFormSubmitProps> = ({
  children,
  className = '',
  disabled = false,
}) => {
  const { submitForm } = useTeemoForm();
  
  return (
    <button
      type="button"
      onClick={submitForm}
      disabled={disabled}
      className={className}
    >
      {children}
    </button>
  );
};

// Common validation rules
export const TeemoValidationRules = {
  required: (message = 'This field is required'): ValidationRule => ({
    test: (value) => {
      if (value === null || value === undefined) return false;
      if (typeof value === 'string') return value.trim() !== '';
      return true;
    },
    message,
  }),
  
  email: (message = 'Please enter a valid email address'): ValidationRule => ({
    test: (value) => {
      if (!value) return true; // Skip if empty (use required rule for required fields)
      const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;
      return emailRegex.test(value);
    },
    message,
  }),
  
  minLength: (length: number, message = `Must be at least ${length} characters`): ValidationRule => ({
    test: (value) => {
      if (!value) return true; // Skip if empty
      return String(value).length >= length;
    },
    message,
  }),
  
  maxLength: (length: number, message = `Must be at most ${length} characters`): ValidationRule => ({
    test: (value) => {
      if (!value) return true; // Skip if empty
      return String(value).length <= length;
    },
    message,
  }),
  
  pattern: (regex: RegExp, message = 'Invalid format'): ValidationRule => ({
    test: (value) => {
      if (!value) return true; // Skip if empty
      return regex.test(value);
    },
    message,
  }),
  
  custom: (testFn: (value: any) => boolean, message: string): ValidationRule => ({
    test: testFn,
    message,
  }),
};

export default {
  TeemoFormProvider,
  TeemoFormField,
  TeemoFormSubmit,
  useTeemoForm,
  TeemoValidationRules,
};
