# C# and .NET MAUI Technology

## Overview

C# is a modern, object-oriented programming language developed by Microsoft as part of the .NET platform. It is designed for building a variety of applications that run on the .NET Framework, .NET Core, and .NET 5/6+. C# combines the power and flexibility of C++ with the simplicity of Visual Basic, making it an excellent choice for developing enterprise applications.

.NET Multi-platform App UI (.NET MAUI) is a cross-platform framework for creating native mobile and desktop apps with C#. .NET MAUI is the evolution of Xamarin.Forms, extending its capabilities to desktop development. With .NET MAUI, you can develop apps that can run on Android, iOS, macOS, and Windows from a single codebase.

### Core Concepts

1. **Object-Oriented Programming**: C# is built around the concept of objects, which can contain data and code.
2. **Type Safety**: C# is a strongly-typed language, which helps prevent type-related errors at compile time.
3. **Component-Based Architecture**: .NET MAUI uses a component-based architecture for building UIs.
4. **XAML**: .NET MAUI uses XAML (eXtensible Application Markup Language) for defining user interfaces.
5. **Data Binding**: .NET MAUI provides a powerful data binding system for connecting UI elements to data sources.
6. **Dependency Injection**: .NET MAUI includes built-in dependency injection for better code organization and testability.
7. **Platform-Specific Customization**: .NET MAUI allows for platform-specific customization while maintaining a shared codebase.

### Cross-Platform Capabilities

C# and .NET MAUI can be used to build applications across multiple platforms:

1. **Mobile**: iOS and Android applications
2. **Desktop**: Windows, macOS applications
3. **Web**: Web applications using Blazor
4. **Cloud**: Cloud services using Azure

## .NET MAUI Component Structure

### ContentPage

```csharp
using Microsoft.Maui;
using Microsoft.Maui.Controls;

namespace MyMauiApp
{
    public class UserProfilePage : ContentPage
    {
        public UserProfilePage(User user)
        {
            Title = "User Profile";
            
            Content = new StackLayout
            {
                Margin = new Thickness(20),
                Children =
                {
                    new Label
                    {
                        Text = user.Name,
                        FontSize = 24,
                        FontAttributes = FontAttributes.Bold
                    },
                    new Label { Text = $"Email: {user.Email}" },
                    new Label { Text = $"Role: {user.Role}" }
                }
            };
        }
    }
    
    public class User
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public string Role { get; set; }
    }
}
```

### XAML Page

```xml
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="MyMauiApp.UserProfilePage"
             Title="User Profile">
    <StackLayout Margin="20">
        <Label Text="{Binding Name}"
               FontSize="24"
               FontAttributes="Bold" />
        <Label Text="{Binding Email, StringFormat='Email: {0}'}" />
        <Label Text="{Binding Role, StringFormat='Role: {0}'}" />
    </StackLayout>
</ContentPage>
```

```csharp
using Microsoft.Maui.Controls;

namespace MyMauiApp
{
    public partial class UserProfilePage : ContentPage
    {
        public UserProfilePage(User user)
        {
            InitializeComponent();
            BindingContext = user;
        }
    }
    
    public class User
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public string Role { get; set; }
    }
}
```

## State Management

### MVVM Pattern

```csharp
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;
using Microsoft.Maui.Controls;

namespace MyMauiApp
{
    // Model
    public class User
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Role { get; set; }
    }
    
    // ViewModel
    public class UserViewModel : INotifyPropertyChanged
    {
        private User _user;
        
        public UserViewModel(User user)
        {
            _user = user;
        }
        
        public string Name
        {
            get => _user.Name;
            set
            {
                if (_user.Name != value)
                {
                    _user.Name = value;
                    OnPropertyChanged();
                }
            }
        }
        
        public string Email
        {
            get => _user.Email;
            set
            {
                if (_user.Email != value)
                {
                    _user.Email = value;
                    OnPropertyChanged();
                }
            }
        }
        
        public string Role
        {
            get => _user.Role;
            set
            {
                if (_user.Role != value)
                {
                    _user.Role = value;
                    OnPropertyChanged();
                }
            }
        }
        
        private ICommand _saveCommand;
        public ICommand SaveCommand => _saveCommand ??= new Command(SaveUser);
        
        private void SaveUser()
        {
            // Save user to database or API
            // ...
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    // View
    public partial class UserProfilePage : ContentPage
    {
        public UserProfilePage(User user)
        {
            InitializeComponent();
            BindingContext = new UserViewModel(user);
        }
    }
}
```

### Community Toolkit MVVM

```csharp
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System.Threading.Tasks;

namespace MyMauiApp
{
    // Model
    public class User
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Role { get; set; }
    }
    
    // ViewModel
    public partial class UserViewModel : ObservableObject
    {
        private readonly User _user;
        
        public UserViewModel(User user)
        {
            _user = user;
        }
        
        [ObservableProperty]
        private string _name;
        
        [ObservableProperty]
        private string _email;
        
        [ObservableProperty]
        private string _role;
        
        [RelayCommand]
        private async Task SaveAsync()
        {
            // Save user to database or API
            // ...
            await Task.Delay(1000); // Simulate API call
        }
        
        partial void OnNameChanged(string value)
        {
            _user.Name = value;
        }
        
        partial void OnEmailChanged(string value)
        {
            _user.Email = value;
        }
        
        partial void OnRoleChanged(string value)
        {
            _user.Role = value;
        }
    }
}
```

## Navigation

### Shell Navigation

```xml
<?xml version="1.0" encoding="utf-8" ?>
<Shell xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
       xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
       xmlns:local="clr-namespace:MyMauiApp"
       x:Class="MyMauiApp.AppShell"
       Title="My MAUI App">

    <ShellContent
        Title="Home"
        ContentTemplate="{DataTemplate local:HomePage}"
        Route="home" />
    
    <ShellContent
        Title="Users"
        ContentTemplate="{DataTemplate local:UsersPage}"
        Route="users" />
    
    <ShellContent
        Title="Settings"
        ContentTemplate="{DataTemplate local:SettingsPage}"
        Route="settings" />

</Shell>
```

```csharp
using Microsoft.Maui.Controls;

namespace MyMauiApp
{
    public partial class AppShell : Shell
    {
        public AppShell()
        {
            InitializeComponent();
            
            // Register routes for navigation
            Routing.RegisterRoute("user-detail", typeof(UserDetailPage));
        }
    }
    
    public class HomePage : ContentPage
    {
        public HomePage()
        {
            Title = "Home";
            
            Content = new StackLayout
            {
                Children =
                {
                    new Label { Text = "Welcome to My MAUI App", FontSize = 24 },
                    new Button
                    {
                        Text = "Go to User Detail",
                        Command = new Command(async () =>
                        {
                            await Shell.Current.GoToAsync("user-detail?id=1");
                        })
                    }
                }
            };
        }
    }
    
    [QueryProperty(nameof(UserId), "id")]
    public class UserDetailPage : ContentPage
    {
        private string _userId;
        
        public string UserId
        {
            get => _userId;
            set
            {
                _userId = value;
                LoadUser(int.Parse(value));
            }
        }
        
        private void LoadUser(int id)
        {
            // Load user from database or API
            // ...
            
            // For demonstration purposes
            var user = new User
            {
                Id = id,
                Name = "John Doe",
                Email = "john@example.com",
                Role = "Admin"
            };
            
            BindingContext = user;
        }
    }
}
```

## Styling

### Styles in XAML

```xml
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="MyMauiApp.StylesPage"
             Title="Styles">
    <ContentPage.Resources>
        <ResourceDictionary>
            <Style x:Key="BaseLabel" TargetType="Label">
                <Setter Property="TextColor" Value="#333333" />
                <Setter Property="FontFamily" Value="OpenSansRegular" />
                <Setter Property="Margin" Value="0,4" />
            </Style>
            
            <Style x:Key="TitleLabel" TargetType="Label" BasedOn="{StaticResource BaseLabel}">
                <Setter Property="FontSize" Value="24" />
                <Setter Property="FontAttributes" Value="Bold" />
                <Setter Property="Margin" Value="0,8" />
            </Style>
            
            <Style x:Key="SubtitleLabel" TargetType="Label" BasedOn="{StaticResource BaseLabel}">
                <Setter Property="FontSize" Value="18" />
                <Setter Property="FontAttributes" Value="Italic" />
            </Style>
            
            <Style x:Key="PrimaryButton" TargetType="Button">
                <Setter Property="BackgroundColor" Value="#0078D7" />
                <Setter Property="TextColor" Value="White" />
                <Setter Property="CornerRadius" Value="4" />
                <Setter Property="Padding" Value="16,8" />
                <Setter Property="Margin" Value="0,8" />
            </Style>
            
            <Style x:Key="SecondaryButton" TargetType="Button">
                <Setter Property="BackgroundColor" Value="#E0E0E0" />
                <Setter Property="TextColor" Value="#333333" />
                <Setter Property="CornerRadius" Value="4" />
                <Setter Property="Padding" Value="16,8" />
                <Setter Property="Margin" Value="0,8" />
            </Style>
        </ResourceDictionary>
    </ContentPage.Resources>
    
    <StackLayout Padding="20">
        <Label Text="Welcome to .NET MAUI" Style="{StaticResource TitleLabel}" />
        <Label Text="Build cross-platform apps with C# and XAML" Style="{StaticResource SubtitleLabel}" />
        
        <Button Text="Primary Action" Style="{StaticResource PrimaryButton}" />
        <Button Text="Secondary Action" Style="{StaticResource SecondaryButton}" />
    </StackLayout>
</ContentPage>
```

### CSS Styling

```css
/* Styles.css */
^contentpage {
    background-color: #f5f5f5;
}

.title-label {
    color: #333333;
    font-size: 24;
    font-weight: bold;
    margin: 0, 8;
}

.subtitle-label {
    color: #333333;
    font-size: 18;
    font-style: italic;
    margin: 0, 4;
}

.primary-button {
    background-color: #0078D7;
    color: white;
    border-radius: 4;
    padding: 16, 8;
    margin: 0, 8;
}

.secondary-button {
    background-color: #E0E0E0;
    color: #333333;
    border-radius: 4;
    padding: 16, 8;
    margin: 0, 8;
}
```

```xml
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="MyMauiApp.CssStylesPage"
             Title="CSS Styles"
             StyleSheet="/Styles.css">
    
    <StackLayout Padding="20">
        <Label Text="Welcome to .NET MAUI" StyleClass="title-label" />
        <Label Text="Build cross-platform apps with C# and XAML" StyleClass="subtitle-label" />
        
        <Button Text="Primary Action" StyleClass="primary-button" />
        <Button Text="Secondary Action" StyleClass="secondary-button" />
    </StackLayout>
</ContentPage>
```

## Forms and Validation

```xml
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:MyMauiApp.ViewModels"
             x:Class="MyMauiApp.LoginPage"
             Title="Login">
    
    <ContentPage.BindingContext>
        <vm:LoginViewModel />
    </ContentPage.BindingContext>
    
    <StackLayout Padding="20" Spacing="16">
        <Label Text="Login" FontSize="24" FontAttributes="Bold" HorizontalOptions="Center" />
        
        <Entry Placeholder="Email"
               Text="{Binding Email}"
               Keyboard="Email" />
        <Label Text="{Binding EmailError}"
               TextColor="Red"
               IsVisible="{Binding HasEmailError}" />
        
        <Entry Placeholder="Password"
               Text="{Binding Password}"
               IsPassword="True" />
        <Label Text="{Binding PasswordError}"
               TextColor="Red"
               IsVisible="{Binding HasPasswordError}" />
        
        <Button Text="Login"
                Command="{Binding LoginCommand}"
                IsEnabled="{Binding CanLogin}"
                BackgroundColor="#0078D7"
                TextColor="White"
                CornerRadius="4"
                Padding="0,12" />
        
        <ActivityIndicator IsRunning="{Binding IsBusy}"
                          IsVisible="{Binding IsBusy}"
                          HorizontalOptions="Center" />
    </StackLayout>
</ContentPage>
```

```csharp
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace MyMauiApp.ViewModels
{
    public partial class LoginViewModel : ObservableObject
    {
        [ObservableProperty]
        private string _email;
        
        [ObservableProperty]
        private string _password;
        
        [ObservableProperty]
        private string _emailError;
        
        [ObservableProperty]
        private string _passwordError;
        
        [ObservableProperty]
        private bool _isBusy;
        
        public bool HasEmailError => !string.IsNullOrEmpty(EmailError);
        public bool HasPasswordError => !string.IsNullOrEmpty(PasswordError);
        public bool CanLogin => !string.IsNullOrEmpty(Email) && !string.IsNullOrEmpty(Password) && !HasEmailError && !HasPasswordError;
        
        partial void OnEmailChanged(string value)
        {
            ValidateEmail();
            OnPropertyChanged(nameof(HasEmailError));
            OnPropertyChanged(nameof(CanLogin));
        }
        
        partial void OnPasswordChanged(string value)
        {
            ValidatePassword();
            OnPropertyChanged(nameof(HasPasswordError));
            OnPropertyChanged(nameof(CanLogin));
        }
        
        private void ValidateEmail()
        {
            if (string.IsNullOrEmpty(Email))
            {
                EmailError = "Email is required";
                return;
            }
            
            if (!Regex.IsMatch(Email, @"^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$"))
            {
                EmailError = "Invalid email format";
                return;
            }
            
            EmailError = string.Empty;
        }
        
        private void ValidatePassword()
        {
            if (string.IsNullOrEmpty(Password))
            {
                PasswordError = "Password is required";
                return;
            }
            
            if (Password.Length < 6)
            {
                PasswordError = "Password must be at least 6 characters";
                return;
            }
            
            PasswordError = string.Empty;
        }
        
        [RelayCommand]
        private async Task LoginAsync()
        {
            ValidateEmail();
            ValidatePassword();
            
            if (HasEmailError || HasPasswordError)
            {
                return;
            }
            
            IsBusy = true;
            
            try
            {
                // Simulate API call
                await Task.Delay(2000);
                
                // Navigate to main page on success
                await Shell.Current.GoToAsync("//main");
            }
            catch (Exception ex)
            {
                await Shell.Current.DisplayAlert("Error", ex.Message, "OK");
            }
            finally
            {
                IsBusy = false;
            }
        }
    }
}
```

## API Integration

### HttpClient

```csharp
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text.Json;
using System.Threading.Tasks;

namespace MyMauiApp.Services
{
    public class User
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Role { get; set; }
    }
    
    public interface IUserService
    {
        Task<List<User>> GetUsersAsync();
        Task<User> GetUserByIdAsync(int id);
        Task<User> CreateUserAsync(User user);
        Task<User> UpdateUserAsync(int id, User user);
        Task DeleteUserAsync(int id);
    }
    
    public class UserService : IUserService
    {
        private readonly HttpClient _httpClient;
        private readonly string _baseUrl = "https://api.example.com/users";
        
        public UserService()
        {
            _httpClient = new HttpClient();
        }
        
        public async Task<List<User>> GetUsersAsync()
        {
            try
            {
                return await _httpClient.GetFromJsonAsync<List<User>>(_baseUrl);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error getting users: {ex.Message}");
                throw;
            }
        }
        
        public async Task<User> GetUserByIdAsync(int id)
        {
            try
            {
                return await _httpClient.GetFromJsonAsync<User>($"{_baseUrl}/{id}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error getting user {id}: {ex.Message}");
                throw;
            }
        }
        
        public async Task<User> CreateUserAsync(User user)
        {
            try
            {
                var response = await _httpClient.PostAsJsonAsync(_baseUrl, user);
                response.EnsureSuccessStatusCode();
                return await response.Content.ReadFromJsonAsync<User>();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error creating user: {ex.Message}");
                throw;
            }
        }
        
        public async Task<User> UpdateUserAsync(int id, User user)
        {
            try
            {
                var response = await _httpClient.PutAsJsonAsync($"{_baseUrl}/{id}", user);
                response.EnsureSuccessStatusCode();
                return await response.Content.ReadFromJsonAsync<User>();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating user {id}: {ex.Message}");
                throw;
            }
        }
        
        public async Task DeleteUserAsync(int id)
        {
            try
            {
                var response = await _httpClient.DeleteAsync($"{_baseUrl}/{id}");
                response.EnsureSuccessStatusCode();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting user {id}: {ex.Message}");
                throw;
            }
        }
    }
}
```

### Dependency Injection

```csharp
using Microsoft.Extensions.DependencyInjection;
using MyMauiApp.Services;
using MyMauiApp.ViewModels;

namespace MyMauiApp
{
    public static class MauiProgram
    {
        public static MauiApp CreateMauiApp()
        {
            var builder = MauiApp.CreateBuilder();
            builder
                .UseMauiApp<App>()
                .ConfigureFonts(fonts =>
                {
                    fonts.AddFont("OpenSans-Regular.ttf", "OpenSansRegular");
                    fonts.AddFont("OpenSans-Semibold.ttf", "OpenSansSemibold");
                });
            
            // Register services
            builder.Services.AddSingleton<IUserService, UserService>();
            
            // Register view models
            builder.Services.AddTransient<UsersViewModel>();
            builder.Services.AddTransient<UserDetailViewModel>();
            builder.Services.AddTransient<LoginViewModel>();
            
            // Register pages
            builder.Services.AddTransient<UsersPage>();
            builder.Services.AddTransient<UserDetailPage>();
            builder.Services.AddTransient<LoginPage>();
            
            return builder.Build();
        }
    }
}
```

## Testing

### Unit Testing with xUnit

```csharp
using System.Collections.Generic;
using System.Threading.Tasks;
using Moq;
using MyMauiApp.Services;
using MyMauiApp.ViewModels;
using Xunit;

namespace MyMauiApp.Tests
{
    public class UsersViewModelTests
    {
        [Fact]
        public async Task LoadUsers_ShouldPopulateUsers()
        {
            // Arrange
            var mockUserService = new Mock<IUserService>();
            mockUserService.Setup(service => service.GetUsersAsync())
                .ReturnsAsync(new List<User>
                {
                    new User { Id = 1, Name = "John Doe", Email = "john@example.com", Role = "Admin" },
                    new User { Id = 2, Name = "Jane Smith", Email = "jane@example.com", Role = "User" }
                });
            
            var viewModel = new UsersViewModel(mockUserService.Object);
            
            // Act
            await viewModel.LoadUsersAsync();
            
            // Assert
            Assert.Equal(2, viewModel.Users.Count);
            Assert.Equal("John Doe", viewModel.Users[0].Name);
            Assert.Equal("jane@example.com", viewModel.Users[1].Email);
            Assert.False(viewModel.IsBusy);
        }
        
        [Fact]
        public async Task LoadUsers_WhenExceptionOccurs_ShouldSetErrorMessage()
        {
            // Arrange
            var mockUserService = new Mock<IUserService>();
            mockUserService.Setup(service => service.GetUsersAsync())
                .ThrowsAsync(new Exception("Network error"));
            
            var viewModel = new UsersViewModel(mockUserService.Object);
            
            // Act
            await viewModel.LoadUsersAsync();
            
            // Assert
            Assert.Empty(viewModel.Users);
            Assert.False(viewModel.IsBusy);
            Assert.Equal("Failed to load users: Network error", viewModel.ErrorMessage);
            Assert.True(viewModel.HasError);
        }
    }
}
```

## Cross-Platform Development

### Platform-Specific Code

```csharp
using Microsoft.Maui.Controls;

namespace MyMauiApp
{
    public class PlatformSpecificPage : ContentPage
    {
        public PlatformSpecificPage()
        {
            Title = "Platform Specific";
            
            var stackLayout = new StackLayout
            {
                Margin = new Thickness(20),
                Children =
                {
                    new Label
                    {
                        Text = "Platform Specific Features",
                        FontSize = 24,
                        FontAttributes = FontAttributes.Bold
                    }
                }
            };
            
            // Add platform-specific UI elements
            #if ANDROID
            stackLayout.Children.Add(new Label
            {
                Text = "This is Android-specific content",
                TextColor = Colors.Green
            });
            #elif IOS
            stackLayout.Children.Add(new Label
            {
                Text = "This is iOS-specific content",
                TextColor = Colors.Blue
            });
            #elif WINDOWS
            stackLayout.Children.Add(new Label
            {
                Text = "This is Windows-specific content",
                TextColor = Colors.Purple
            });
            #elif MACCATALYST
            stackLayout.Children.Add(new Label
            {
                Text = "This is macOS-specific content",
                TextColor = Colors.Orange
            });
            #endif
            
            Content = stackLayout;
        }
    }
}
```

### Platform-Specific Services

```csharp
using Microsoft.Maui.Controls;

namespace MyMauiApp.Services
{
    public interface IDeviceService
    {
        string GetPlatformName();
        void ShareText(string text);
    }
    
    public class DeviceService : IDeviceService
    {
        public string GetPlatformName()
        {
            #if ANDROID
            return "Android";
            #elif IOS
            return "iOS";
            #elif WINDOWS
            return "Windows";
            #elif MACCATALYST
            return "macOS";
            #else
            return "Unknown";
            #endif
        }
        
        public void ShareText(string text)
        {
            // Implementation varies by platform
            #if ANDROID
            // Android-specific sharing
            AndroidShareText(text);
            #elif IOS
            // iOS-specific sharing
            IOSShareText(text);
            #elif WINDOWS
            // Windows-specific sharing
            WindowsShareText(text);
            #elif MACCATALYST
            // macOS-specific sharing
            MacOSShareText(text);
            #endif
        }
        
        #if ANDROID
        private void AndroidShareText(string text)
        {
            // Android implementation
        }
        #elif IOS
        private void IOSShareText(string text)
        {
            // iOS implementation
        }
        #elif WINDOWS
        private void WindowsShareText(string text)
        {
            // Windows implementation
        }
        #elif MACCATALYST
        private void MacOSShareText(string text)
        {
            // macOS implementation
        }
        #endif
    }
}
```

## Best Practices

1. **Use MVVM Pattern**: For better separation of concerns and testability
2. **Implement Dependency Injection**: For loose coupling and better testability
3. **Use XAML for UI**: For better separation of UI and logic
4. **Implement Proper Error Handling**: For better user experience
5. **Use Shell Navigation**: For consistent navigation experience
6. **Implement Proper Form Validation**: For data integrity
7. **Use Resource Dictionaries**: For consistent styling
8. **Implement Proper Testing**: For code quality
9. **Use Platform-Specific Customization**: For better user experience on each platform
10. **Follow .NET MAUI Guidelines**: For consistent code style and best practices
