# Vue.js and Nuxt Technology

## Overview

Vue.js is a progressive JavaScript framework for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, making it easy to integrate with other libraries or existing projects.

Nuxt is a higher-level framework built on top of Vue that provides structure and conventions for building full-stack Vue applications. Nuxt 4 is the latest version, offering improved performance, better developer experience, and enhanced capabilities for building modern web applications.

### Core Concepts

1. **Reactive Data Binding**: Vue's reactivity system automatically updates the DOM when the underlying data changes.
2. **Component-Based Architecture**: Vue applications are built using components that encapsulate their own HTML, CSS, and JavaScript.
3. **Directives**: Special attributes with the `v-` prefix that apply reactive behavior to the DOM.
4. **Computed Properties**: Functions that derive values from reactive dependencies and cache their results.
5. **Watchers**: Special functions that execute when watched data changes.
6. **Composition API**: A set of function-based APIs that allow for better code organization and reuse.
7. **Single-File Components (SFC)**: Files with a `.vue` extension that contain template, script, and style blocks.

## Vue Component Structure

### Single-File Components (SFC)

```vue
<template>
  <div class="user-profile">
    <h1>{{ user.name }}</h1>
    <p>Email: {{ user.email }}</p>
    <p>Role: {{ user.role }}</p>
  </div>
</template>

<script>
export default {
  props: {
    userId: {
      type: String,
      required: true
    }
  },
  data() {
    return {
      user: null,
      loading: true
    };
  },
  async created() {
    await this.fetchUser();
  },
  methods: {
    async fetchUser() {
      this.loading = true;
      try {
        const response = await fetch(`/api/users/${this.userId}`);
        this.user = await response.json();
      } catch (error) {
        console.error('Error fetching user:', error);
      } finally {
        this.loading = false;
      }
    }
  }
};
</script>

<style scoped>
.user-profile {
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}
</style>
```

### Composition API

```vue
<template>
  <div class="user-profile">
    <div v-if="loading">Loading...</div>
    <div v-else-if="!user">User not found</div>
    <template v-else>
      <h1>{{ user.name }}</h1>
      <p>Email: {{ user.email }}</p>
      <p>Role: {{ user.role }}</p>
    </template>
  </div>
</template>

<script setup>
import { ref, onMounted, watch } from 'vue';

const props = defineProps({
  userId: {
    type: String,
    required: true
  }
});

const user = ref(null);
const loading = ref(true);

async function fetchUser() {
  loading.value = true;
  try {
    const response = await fetch(`/api/users/${props.userId}`);
    user.value = await response.json();
  } catch (error) {
    console.error('Error fetching user:', error);
  } finally {
    loading.value = false;
  }
}

onMounted(() => {
  fetchUser();
});

watch(() => props.userId, () => {
  fetchUser();
});
</script>
```

## State Management

### Pinia (Recommended State Management)

```javascript
// stores/counter.js
import { defineStore } from 'pinia';

export const useCounterStore = defineStore('counter', {
  state: () => ({
    count: 0
  }),
  getters: {
    doubleCount: (state) => state.count * 2
  },
  actions: {
    increment() {
      this.count++;
    },
    decrement() {
      this.count--;
    },
    async fetchInitialCount() {
      const response = await fetch('/api/counter');
      const data = await response.json();
      this.count = data.count;
    }
  }
});
```

## Nuxt 4 Specific Features

### Server Routes

```javascript
// server/api/users.js
export default defineEventHandler(async (event) => {
  // Get users from database or external API
  const users = [
    { id: 1, name: 'John Doe', email: 'john@example.com' },
    { id: 2, name: 'Jane Smith', email: 'jane@example.com' }
  ];
  
  return users;
});
```

### Data Fetching

```vue
<template>
  <div>
    <div v-if="pending">Loading...</div>
    <div v-else-if="error">Error: {{ error.message }}</div>
    <ul v-else>
      <li v-for="user in data" :key="user.id">{{ user.name }}</li>
    </ul>
  </div>
</template>

<script setup>
// useFetch is a built-in composable in Nuxt
const { data, pending, error, refresh } = await useFetch('/api/users');
</script>
```

### File-Based Routing

```javascript
// Nuxt uses file-based routing
// pages/index.vue
<template>
  <div>
    <h1>Home Page</h1>
  </div>
</template>

// pages/users/[id].vue
<template>
  <div>
    <h1>User Detail</h1>
    <div v-if="pending">Loading...</div>
    <div v-else-if="error">Error: {{ error.message }}</div>
    <div v-else>
      <h2>{{ user.name }}</h2>
      <p>Email: {{ user.email }}</p>
    </div>
    <NuxtLink to="/users">Back to Users</NuxtLink>
  </div>
</template>

<script setup>
const route = useRoute();
const { data: user, pending, error } = await useFetch(`/api/users/${route.params.id}`);
</script>
```

## Cross-Platform Development

### Electron with Vue/Nuxt

```javascript
// electron/main.js
const { app, BrowserWindow } = require('electron');
const path = require('path');
const isDev = require('electron-is-dev');

let mainWindow;

function createWindow() {
  mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
      preload: path.join(__dirname, 'preload.js')
    }
  });

  mainWindow.loadURL(
    isDev
      ? 'http://localhost:3000'
      : `file://${path.join(__dirname, '../.output/public/index.html')}`
  );
}

app.on('ready', createWindow);
```

### Mobile with Capacitor/Ionic

```javascript
// capacitor.config.ts
import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  appId: 'com.example.app',
  appName: 'My Vue App',
  webDir: 'dist',
  bundledWebRuntime: false,
  server: {
    androidScheme: 'https'
  }
};

export default config;
```

## Best Practices

1. **Use Composition API**: For better code organization and reuse
2. **Implement SSR with Nuxt**: For better SEO and performance
3. **Use TypeScript**: For type safety and better developer experience
4. **Implement Pinia for State Management**: For predictable state management
5. **Use Vue Router or Nuxt Routing**: For client-side navigation
6. **Implement Proper Error Handling**: For better user experience
7. **Use Scoped CSS or CSS Modules**: For component-specific styling
8. **Implement Proper Testing**: With Vitest and Vue Test Utils
9. **Use Nuxt Modules**: For extending functionality
10. **Follow Vue Style Guide**: For consistent code style
