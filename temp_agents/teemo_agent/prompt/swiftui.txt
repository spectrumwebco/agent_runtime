# Swift UI Technology

## Overview

SwiftUI is Apple's modern UI framework for building user interfaces across all Apple platforms: iOS, iPadOS, macOS, watchOS, tvOS, and visionOS. Introduced in 2019, SwiftUI provides a declarative Swift syntax that makes UI development more intuitive and consistent. It allows developers to create beautiful, dynamic apps with less code and more powerful tools.

SwiftUI works seamlessly with Apple's ecosystem, providing native integration with platform features while maintaining a consistent API across all Apple platforms. It leverages Swift's powerful features like protocol extensions, opaque return types, and property wrappers to create a concise and expressive UI development experience.

### Core Concepts

1. **Declarative Syntax**: SwiftUI uses a declarative approach to building UIs, where you describe what your UI should look like and how it should behave.
2. **View Protocol**: Everything in SwiftUI is a View, from simple text elements to complex layouts.
3. **State and Data Flow**: SwiftUI provides several property wrappers for managing state and data flow, such as `@State`, `@Binding`, `@ObservedObject`, `@EnvironmentObject`, and `@StateObject`.
4. **Modifiers**: Views are modified using chainable modifier methods that return new views.
5. **Layout System**: SwiftUI uses a flexible layout system with stacks, frames, and alignment guides.
6. **Animations and Transitions**: Built-in support for animations and transitions with minimal code.
7. **Previews**: Real-time previews of your UI in Xcode's canvas.

### Cross-Platform Capabilities

SwiftUI can be used to build applications across all Apple platforms:

1. **iOS/iPadOS**: Mobile applications for iPhone and iPad
2. **macOS**: Desktop applications for Mac computers
3. **watchOS**: Applications for Apple Watch
4. **tvOS**: Applications for Apple TV
5. **visionOS**: Applications for Apple Vision Pro

## View Structure

### Basic Views

```swift
import SwiftUI

struct UserProfile: View {
    let name: String
    let email: String
    let role: String
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text(name)
                .font(.title)
                .fontWeight(.bold)
            
            Text("Email: \(email)")
                .font(.body)
            
            Text("Role: \(role)")
                .font(.body)
        }
        .padding()
        .background(Color(.systemBackground))
        .cornerRadius(10)
        .shadow(radius: 3)
        .padding()
    }
}

struct UserProfile_Previews: PreviewProvider {
    static var previews: some View {
        UserProfile(
            name: "John Doe",
            email: "john@example.com",
            role: "Admin"
        )
    }
}
```

### Composing Views

```swift
import SwiftUI

struct ContentView: View {
    var body: some View {
        NavigationView {
            List {
                Section(header: Text("Users")) {
                    UserRow(name: "John Doe", role: "Admin")
                    UserRow(name: "Jane Smith", role: "Editor")
                    UserRow(name: "Bob Johnson", role: "Viewer")
                }
                
                Section(header: Text("Settings")) {
                    NavigationLink(destination: SettingsView()) {
                        Label("Settings", systemImage: "gear")
                    }
                    
                    NavigationLink(destination: HelpView()) {
                        Label("Help", systemImage: "questionmark.circle")
                    }
                }
            }
            .listStyle(InsetGroupedListStyle())
            .navigationTitle("Dashboard")
        }
    }
}

struct UserRow: View {
    let name: String
    let role: String
    
    var body: some View {
        NavigationLink(destination: UserDetailView(name: name, role: role)) {
            HStack {
                Image(systemName: "person.circle")
                    .font(.title2)
                
                VStack(alignment: .leading) {
                    Text(name)
                        .font(.headline)
                    
                    Text(role)
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                }
            }
            .padding(.vertical, 4)
        }
    }
}

struct UserDetailView: View {
    let name: String
    let role: String
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            Image(systemName: "person.circle")
                .font(.system(size: 64))
                .foregroundColor(.accentColor)
            
            Text(name)
                .font(.title)
                .fontWeight(.bold)
            
            Text("Role: \(role)")
                .font(.headline)
            
            Divider()
            
            Text("User Details")
                .font(.headline)
            
            Text("This is where you would display more detailed information about the user, such as contact information, permissions, activity history, etc.")
                .font(.body)
                .foregroundColor(.secondary)
            
            Spacer()
        }
        .padding()
        .navigationTitle("User Details")
        .navigationBarTitleDisplayMode(.inline)
    }
}
```

## State Management

### @State

```swift
import SwiftUI

struct CounterView: View {
    @State private var count = 0
    
    var body: some View {
        VStack(spacing: 20) {
            Text("Count: \(count)")
                .font(.title)
            
            HStack(spacing: 20) {
                Button(action: {
                    count -= 1
                }) {
                    Label("Decrement", systemImage: "minus.circle")
                }
                .buttonStyle(.bordered)
                
                Button(action: {
                    count += 1
                }) {
                    Label("Increment", systemImage: "plus.circle")
                }
                .buttonStyle(.bordered)
            }
        }
        .padding()
    }
}
```

### @Binding

```swift
import SwiftUI

struct ParentView: View {
    @State private var isToggleOn = false
    
    var body: some View {
        VStack(spacing: 20) {
            Text("Toggle is \(isToggleOn ? "ON" : "OFF")")
                .font(.headline)
            
            ToggleView(isOn: $isToggleOn)
            
            Button(action: {
                isToggleOn.toggle()
            }) {
                Text("Toggle from Parent")
            }
            .buttonStyle(.bordered)
        }
        .padding()
    }
}

struct ToggleView: View {
    @Binding var isOn: Bool
    
    var body: some View {
        Toggle("Toggle Setting", isOn: $isOn)
            .padding()
            .background(Color(.systemGray6))
            .cornerRadius(8)
            .padding(.horizontal)
    }
}
```

### ObservableObject

```swift
import SwiftUI
import Combine

class UserViewModel: ObservableObject {
    @Published var name: String
    @Published var email: String
    @Published var role: String
    
    init(name: String, email: String, role: String) {
        self.name = name
        self.email = email
        self.role = role
    }
    
    func updateRole(to newRole: String) {
        role = newRole
    }
}

struct UserProfileView: View {
    @ObservedObject var viewModel: UserViewModel
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text(viewModel.name)
                .font(.title)
                .fontWeight(.bold)
            
            Text("Email: \(viewModel.email)")
                .font(.body)
            
            Text("Role: \(viewModel.role)")
                .font(.body)
            
            Divider()
            
            Text("Change Role")
                .font(.headline)
            
            HStack {
                Button("Admin") {
                    viewModel.updateRole(to: "Admin")
                }
                .buttonStyle(.bordered)
                
                Button("Editor") {
                    viewModel.updateRole(to: "Editor")
                }
                .buttonStyle(.bordered)
                
                Button("Viewer") {
                    viewModel.updateRole(to: "Viewer")
                }
                .buttonStyle(.bordered)
            }
        }
        .padding()
        .background(Color(.systemBackground))
        .cornerRadius(10)
        .shadow(radius: 3)
        .padding()
    }
}
```

## Navigation

### NavigationView and NavigationLink

```swift
import SwiftUI

struct User: Identifiable {
    let id = UUID()
    let name: String
    let email: String
    let role: String
}

struct UsersListView: View {
    let users = [
        User(name: "John Doe", email: "john@example.com", role: "Admin"),
        User(name: "Jane Smith", email: "jane@example.com", role: "Editor"),
        User(name: "Bob Johnson", email: "bob@example.com", role: "Viewer")
    ]
    
    var body: some View {
        NavigationView {
            List(users) { user in
                NavigationLink(destination: UserDetailView(user: user)) {
                    VStack(alignment: .leading) {
                        Text(user.name)
                            .font(.headline)
                        
                        Text(user.email)
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                    }
                }
            }
            .navigationTitle("Users")
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button(action: {
                        // Add new user
                    }) {
                        Image(systemName: "plus")
                    }
                }
            }
        }
    }
}

struct UserDetailView: View {
    let user: User
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text(user.name)
                .font(.title)
                .fontWeight(.bold)
            
            Text("Email: \(user.email)")
                .font(.body)
            
            Text("Role: \(user.role)")
                .font(.body)
            
            Spacer()
        }
        .padding()
        .navigationTitle("User Details")
        .navigationBarTitleDisplayMode(.inline)
    }
}
```

### NavigationStack (iOS 16+)

```swift
import SwiftUI

struct User: Identifiable {
    let id = UUID()
    let name: String
    let email: String
    let role: String
}

struct UsersListView: View {
    let users = [
        User(name: "John Doe", email: "john@example.com", role: "Admin"),
        User(name: "Jane Smith", email: "jane@example.com", role: "Editor"),
        User(name: "Bob Johnson", email: "bob@example.com", role: "Viewer")
    ]
    
    var body: some View {
        NavigationStack {
            List(users) { user in
                NavigationLink(value: user) {
                    VStack(alignment: .leading) {
                        Text(user.name)
                            .font(.headline)
                        
                        Text(user.email)
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                    }
                }
            }
            .navigationTitle("Users")
            .navigationDestination(for: User.self) { user in
                UserDetailView(user: user)
            }
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button(action: {
                        // Add new user
                    }) {
                        Image(systemName: "plus")
                    }
                }
            }
        }
    }
}

struct UserDetailView: View {
    let user: User
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text(user.name)
                .font(.title)
                .fontWeight(.bold)
            
            Text("Email: \(user.email)")
                .font(.body)
            
            Text("Role: \(user.role)")
                .font(.body)
            
            Spacer()
        }
        .padding()
        .navigationTitle("User Details")
        .navigationBarTitleDisplayMode(.inline)
    }
}
```

## Forms and Validation

```swift
import SwiftUI

struct LoginForm: View {
    @State private var email = ""
    @State private var password = ""
    @State private var rememberMe = false
    
    @State private var emailError: String? = nil
    @State private var passwordError: String? = nil
    
    @State private var isLoggingIn = false
    @State private var showAlert = false
    @State private var alertMessage = ""
    
    var isFormValid: Bool {
        validateEmail() == nil && validatePassword() == nil && !email.isEmpty && !password.isEmpty
    }
    
    func validateEmail() -> String? {
        if email.isEmpty {
            return "Email is required"
        }
        
        let emailRegex = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}"
        let emailPredicate = NSPredicate(format: "SELF MATCHES %@", emailRegex)
        
        if !emailPredicate.evaluate(with: email) {
            return "Invalid email format"
        }
        
        return nil
    }
    
    func validatePassword() -> String? {
        if password.isEmpty {
            return "Password is required"
        }
        
        if password.count < 6 {
            return "Password must be at least 6 characters"
        }
        
        return nil
    }
    
    func login() {
        emailError = validateEmail()
        passwordError = validatePassword()
        
        if isFormValid {
            isLoggingIn = true
            
            // Simulate API call
            DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
                isLoggingIn = false
                
                // Simulate successful login
                if email == "user@example.com" && password == "password" {
                    // Navigate to main screen or update app state
                    alertMessage = "Login successful!"
                } else {
                    alertMessage = "Invalid email or password"
                }
                
                showAlert = true
            }
        }
    }
    
    var body: some View {
        Form {
            Section(header: Text("Login Information")) {
                TextField("Email", text: $email)
                    .autocapitalization(.none)
                    .keyboardType(.emailAddress)
                    .onChange(of: email) { _ in
                        emailError = validateEmail()
                    }
                
                if let error = emailError {
                    Text(error)
                        .font(.caption)
                        .foregroundColor(.red)
                }
                
                SecureField("Password", text: $password)
                    .onChange(of: password) { _ in
                        passwordError = validatePassword()
                    }
                
                if let error = passwordError {
                    Text(error)
                        .font(.caption)
                        .foregroundColor(.red)
                }
                
                Toggle("Remember Me", isOn: $rememberMe)
            }
            
            Section {
                Button(action: login) {
                    if isLoggingIn {
                        ProgressView()
                            .progressViewStyle(CircularProgressViewStyle())
                    } else {
                        Text("Login")
                    }
                }
                .frame(maxWidth: .infinity, alignment: .center)
                .disabled(!isFormValid || isLoggingIn)
            }
        }
        .alert(alertMessage, isPresented: $showAlert) {
            Button("OK", role: .cancel) { }
        }
        .navigationTitle("Login")
    }
}
```

## API Integration

### URLSession

```swift
import SwiftUI

struct User: Identifiable, Codable {
    let id: Int
    let name: String
    let email: String
    let role: String
}

class UserService {
    static let shared = UserService()
    private let baseURL = "https://api.example.com/users"
    
    func getUsers() async throws -> [User] {
        guard let url = URL(string: baseURL) else {
            throw URLError(.badURL)
        }
        
        let (data, response) = try await URLSession.shared.data(from: url)
        
        guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {
            throw URLError(.badServerResponse)
        }
        
        return try JSONDecoder().decode([User].self, from: data)
    }
    
    func getUser(id: Int) async throws -> User {
        guard let url = URL(string: "\(baseURL)/\(id)") else {
            throw URLError(.badURL)
        }
        
        let (data, response) = try await URLSession.shared.data(from: url)
        
        guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {
            throw URLError(.badServerResponse)
        }
        
        return try JSONDecoder().decode(User.self, from: data)
    }
    
    func createUser(user: User) async throws -> User {
        guard let url = URL(string: baseURL) else {
            throw URLError(.badURL)
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try JSONEncoder().encode(user)
        
        let (data, response) = try await URLSession.shared.data(for: request)
        
        guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 201 else {
            throw URLError(.badServerResponse)
        }
        
        return try JSONDecoder().decode(User.self, from: data)
    }
    
    func updateUser(id: Int, user: User) async throws -> User {
        guard let url = URL(string: "\(baseURL)/\(id)") else {
            throw URLError(.badURL)
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "PUT"
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try JSONEncoder().encode(user)
        
        let (data, response) = try await URLSession.shared.data(for: request)
        
        guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {
            throw URLError(.badServerResponse)
        }
        
        return try JSONDecoder().decode(User.self, from: data)
    }
    
    func deleteUser(id: Int) async throws {
        guard let url = URL(string: "\(baseURL)/\(id)") else {
            throw URLError(.badURL)
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "DELETE"
        
        let (_, response) = try await URLSession.shared.data(for: request)
        
        guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 204 else {
            throw URLError(.badServerResponse)
        }
    }
}
```

## Cross-Platform Development

### Shared Code with Platform-Specific UI

```swift
import SwiftUI

struct UserProfileView: View {
    let user: User
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            #if os(iOS) || os(macOS)
            Image(systemName: "person.circle")
                .font(.system(size: 64))
                .foregroundColor(.accentColor)
            #endif
            
            Text(user.name)
                .font(.title)
                .fontWeight(.bold)
            
            Text("Email: \(user.email)")
                .font(.body)
            
            Text("Role: \(user.role)")
                .font(.body)
            
            #if os(iOS)
            // iOS-specific UI
            Button(action: {
                // Share user profile
                let activityItems = ["User: \(user.name), Email: \(user.email), Role: \(user.role)"]
                let activityController = UIActivityViewController(activityItems: activityItems, applicationActivities: nil)
                
                if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                   let rootViewController = windowScene.windows.first?.rootViewController {
                    rootViewController.present(activityController, animated: true)
                }
            }) {
                Label("Share Profile", systemImage: "square.and.arrow.up")
            }
            .padding(.top)
            #elseif os(macOS)
            // macOS-specific UI
            Button(action: {
                // Copy user info to clipboard
                let pasteboard = NSPasteboard.general
                pasteboard.clearContents()
                pasteboard.setString("User: \(user.name), Email: \(user.email), Role: \(user.role)", forType: .string)
            }) {
                Label("Copy to Clipboard", systemImage: "doc.on.doc")
            }
            .padding(.top)
            #endif
        }
        .padding()
        #if os(iOS)
        .navigationBarTitle("User Profile", displayMode: .inline)
        #elseif os(macOS)
        .navigationTitle("User Profile")
        #endif
    }
}
```

## Best Practices

1. **Use SwiftUI Previews**: For rapid UI development and testing
2. **Implement MVVM Pattern**: For better separation of concerns and testability
3. **Use Property Wrappers**: For state management and data flow
4. **Implement Proper Error Handling**: For better user experience
5. **Use SwiftUI's Layout System**: For responsive and adaptive layouts
6. **Implement Proper Form Validation**: For data integrity
7. **Use SwiftUI's Animation System**: For smooth transitions and interactions
8. **Implement Proper Testing**: For code quality
9. **Use Platform-Specific Customization**: For better user experience on each platform
10. **Follow Apple's Human Interface Guidelines**: For consistent design and user experience
