<template>
  <div class="{{page_name_kebab}}-container">
    <h1>{{ title }}</h1>
    
    {{#if_has_breadcrumbs}}
    <nav v-if="showBreadcrumbs" aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><router-link to="/">Home</router-link></li>
        {{#if_has_params}}
        <li class="breadcrumb-item"><router-link :to="`/{{entity_name_plural}}`">{{entity_name_plural}}</router-link></li>
        <li class="breadcrumb-item active" aria-current="page">{{ id ? 'Edit' : 'Create' }}</li>
        {{/if_has_params}}
        {{^if_has_params}}
        <li class="breadcrumb-item active" aria-current="page">{{page_title}}</li>
        {{/if_has_params}}
      </ol>
    </nav>
    {{/if_has_breadcrumbs}}
    
    {{#if_has_api}}
    <div v-if="loading" class="loading-spinner">Loading...</div>
    <div v-else-if="error" class="error-message">{{ error }}</div>
    <div v-else class="content">
      {{#if_has_form}}
      <form @submit.prevent="handleSubmit">
        <div class="form-group">
          <label for="name">Name</label>
          <input
            type="text"
            class="form-control"
            id="name"
            v-model="formData.name"
            required
          />
        </div>
        
        <div class="form-group">
          <label for="description">Description</label>
          <textarea
            class="form-control"
            id="description"
            v-model="formData.description"
            rows="3"
          ></textarea>
        </div>
        
        <div class="form-actions">
          <button type="submit" class="btn btn-primary">
            {{#if_has_params}}
            {{ id ? 'Update' : 'Create' }}
            {{/if_has_params}}
            {{^if_has_params}}
            Submit
            {{/if_has_params}}
          </button>
          <button
            type="button"
            class="btn btn-secondary"
            @click="$router.push('/{{entity_name_plural}}')"
          >
            Cancel
          </button>
        </div>
      </form>
      {{/if_has_form}}
      {{^if_has_form}}
      {{#if_has_params}}
      <div v-if="data" class="data-details">
        <h2>{{ data.name }}</h2>
        <p>{{ data.description }}</p>
        <!-- Add more fields as needed -->
        
        <div class="action-buttons">
          <button
            class="btn btn-primary"
            @click="$router.push(`/{{entity_name_plural}}/${data.id}/edit`)"
          >
            Edit
          </button>
          <button
            class="btn btn-danger"
            @click="deleteItem"
          >
            Delete
          </button>
          <button
            class="btn btn-secondary"
            @click="$router.push('/{{entity_name_plural}}')"
          >
            Back to List
          </button>
        </div>
      </div>
      {{/if_has_params}}
      {{^if_has_params}}
      <div class="data-list">
        <div class="list-actions">
          <button
            class="btn btn-primary"
            @click="$router.push('/{{entity_name_plural}}/new')"
          >
            Create New
          </button>
        </div>
        
        <table v-if="data && data.length > 0" class="table">
          <thead>
            <tr>
              <th>Name</th>
              <th>Description</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <tr v-for="item in data" :key="item.id">
              <td>{{ item.name }}</td>
              <td>{{ item.description }}</td>
              <td>
                <button
                  class="btn btn-sm btn-info"
                  @click="$router.push(`/{{entity_name_plural}}/${item.id}`)"
                >
                  View
                </button>
                <button
                  class="btn btn-sm btn-primary"
                  @click="$router.push(`/{{entity_name_plural}}/${item.id}/edit`)"
                >
                  Edit
                </button>
                <button
                  class="btn btn-sm btn-danger"
                  @click="deleteItemFromList(item)"
                >
                  Delete
                </button>
              </td>
            </tr>
          </tbody>
        </table>
        <div v-else class="no-data">No items found.</div>
      </div>
      {{/if_has_params}}
      {{/if_has_form}}
    </div>
    {{/if_has_api}}
    {{^if_has_api}}
    <div class="content">
      {{#if_has_form}}
      <form @submit.prevent="handleSubmit">
        <div class="form-group">
          <label for="name">Name</label>
          <input
            type="text"
            class="form-control"
            id="name"
            v-model="formData.name"
            required
          />
        </div>
        
        <div class="form-group">
          <label for="description">Description</label>
          <textarea
            class="form-control"
            id="description"
            v-model="formData.description"
            rows="3"
          ></textarea>
        </div>
        
        <div class="form-actions">
          <button type="submit" class="btn btn-primary">Submit</button>
          <button
            type="button"
            class="btn btn-secondary"
            @click="$router.push('/')"
          >
            Cancel
          </button>
        </div>
      </form>
      {{/if_has_form}}
      {{^if_has_form}}
      <p>This is the {{page_title}} page content.</p>
      <button
        class="btn btn-primary"
        @click="$router.push('/')"
      >
        Back to Home
      </button>
      {{/if_has_form}}
    </div>
    {{/if_has_api}}
  </div>
</template>

<script{{#typescript}} lang="ts"{{/typescript}}>
{{#typescript}}
import { defineComponent, ref, onMounted, computed } from 'vue';
import { useRoute, useRouter } from 'vue-router';
{{#if_has_api}}
import { {{entity_name}}Service } from '@/services/{{entity_name}}Service';
import type { {{entity_interface}} } from '@/types/{{entity_name}}Types';
{{/if_has_api}}

export default defineComponent({
  name: '{{page_name}}',
  props: {
    title: {
      type: String,
      default: '{{page_title}}'
    },
    {{#if_has_breadcrumbs}}
    showBreadcrumbs: {
      type: Boolean,
      default: true
    }
    {{/if_has_breadcrumbs}}
  },
  setup(props) {
    const route = useRoute();
    const router = useRouter();
    
    {{#if_has_params}}
    const id = computed(() => route.params.id as string);
    {{/if_has_params}}
    
    {{#if_has_api}}
    const data = ref<{{entity_interface}} | null>(null);
    const loading = ref(true);
    const error = ref('');
    
    const fetchData = async () => {
      try {
        loading.value = true;
        {{#if_has_params}}
        if (!id.value) {
          throw new Error('ID is required');
        }
        data.value = await {{entity_name}}Service.getById(id.value);
        {{/if_has_params}}
        {{^if_has_params}}
        data.value = await {{entity_name}}Service.getAll();
        {{/if_has_params}}
        error.value = '';
      } catch (err) {
        console.error('Error fetching data:', err);
        error.value = 'Failed to load data. Please try again later.';
      } finally {
        loading.value = false;
      }
    };
    
    onMounted(() => {
      fetchData();
    });
    {{/if_has_api}}
    
    {{#if_has_form}}
    const formData = ref({
      name: '',
      description: ''
    });
    
    const handleSubmit = async () => {
      {{#if_has_api}}
      try {
        loading.value = true;
        {{#if_has_params}}
        if (id.value) {
          await {{entity_name}}Service.update(id.value, formData.value);
        } else {
          await {{entity_name}}Service.create(formData.value);
        }
        {{/if_has_params}}
        {{^if_has_params}}
        await {{entity_name}}Service.create(formData.value);
        {{/if_has_params}}
        router.push('/{{entity_name_plural}}');
      } catch (err) {
        console.error('Error submitting form:', err);
        error.value = 'Failed to save data. Please try again later.';
      } finally {
        loading.value = false;
      }
      {{/if_has_api}}
      {{^if_has_api}}
      console.log('Form submitted:', formData.value);
      // Add form submission logic here
      {{/if_has_api}}
    };
    {{/if_has_form}}
    
    {{#if_has_api}}
    {{#if_has_params}}
    const deleteItem = async () => {
      if (window.confirm('Are you sure you want to delete this item?')) {
        try {
          await {{entity_name}}Service.delete(id.value);
          router.push('/{{entity_name_plural}}');
        } catch (err) {
          console.error('Error deleting item:', err);
          error.value = 'Failed to delete item. Please try again later.';
        }
      }
    };
    {{/if_has_params}}
    {{^if_has_params}}
    const deleteItemFromList = async (item: {{entity_interface}}) => {
      if (window.confirm('Are you sure you want to delete this item?')) {
        try {
          await {{entity_name}}Service.delete(item.id);
          // Refresh the list
          if (Array.isArray(data.value)) {
            data.value = data.value.filter((i) => i.id !== item.id);
          }
        } catch (err) {
          console.error('Error deleting item:', err);
          error.value = 'Failed to delete item. Please try again later.';
        }
      }
    };
    {{/if_has_params}}
    {{/if_has_api}}
    
    return {
      {{#if_has_params}}
      id,
      {{/if_has_params}}
      {{#if_has_api}}
      data,
      loading,
      error,
      {{/if_has_api}}
      {{#if_has_form}}
      formData,
      handleSubmit,
      {{/if_has_form}}
      {{#if_has_api}}
      {{#if_has_params}}
      deleteItem,
      {{/if_has_params}}
      {{^if_has_params}}
      deleteItemFromList,
      {{/if_has_params}}
      {{/if_has_api}}
    };
  }
});
{{/typescript}}
{{^typescript}}
export default {
  name: '{{page_name}}',
  props: {
    title: {
      type: String,
      default: '{{page_title}}'
    },
    {{#if_has_breadcrumbs}}
    showBreadcrumbs: {
      type: Boolean,
      default: true
    }
    {{/if_has_breadcrumbs}}
  },
  data() {
    return {
      {{#if_has_api}}
      data: null,
      loading: true,
      error: '',
      {{/if_has_api}}
      {{#if_has_form}}
      formData: {
        name: '',
        description: ''
      }
      {{/if_has_form}}
    };
  },
  {{#if_has_params}}
  computed: {
    id() {
      return this.$route.params.id;
    }
  },
  {{/if_has_params}}
  {{#if_has_api}}
  created() {
    this.fetchData();
  },
  {{/if_has_api}}
  methods: {
    {{#if_has_api}}
    async fetchData() {
      try {
        this.loading = true;
        {{#if_has_params}}
        if (!this.id) {
          throw new Error('ID is required');
        }
        this.data = await this.${{entity_name}}Service.getById(this.id);
        {{/if_has_params}}
        {{^if_has_params}}
        this.data = await this.${{entity_name}}Service.getAll();
        {{/if_has_params}}
        this.error = '';
      } catch (err) {
        console.error('Error fetching data:', err);
        this.error = 'Failed to load data. Please try again later.';
      } finally {
        this.loading = false;
      }
    },
    {{/if_has_api}}
    {{#if_has_form}}
    async handleSubmit() {
      {{#if_has_api}}
      try {
        this.loading = true;
        {{#if_has_params}}
        if (this.id) {
          await this.${{entity_name}}Service.update(this.id, this.formData);
        } else {
          await this.${{entity_name}}Service.create(this.formData);
        }
        {{/if_has_params}}
        {{^if_has_params}}
        await this.${{entity_name}}Service.create(this.formData);
        {{/if_has_params}}
        this.$router.push('/{{entity_name_plural}}');
      } catch (err) {
        console.error('Error submitting form:', err);
        this.error = 'Failed to save data. Please try again later.';
      } finally {
        this.loading = false;
      }
      {{/if_has_api}}
      {{^if_has_api}}
      console.log('Form submitted:', this.formData);
      // Add form submission logic here
      {{/if_has_api}}
    },
    {{/if_has_form}}
    {{#if_has_api}}
    {{#if_has_params}}
    async deleteItem() {
      if (window.confirm('Are you sure you want to delete this item?')) {
        try {
          await this.${{entity_name}}Service.delete(this.id);
          this.$router.push('/{{entity_name_plural}}');
        } catch (err) {
          console.error('Error deleting item:', err);
          this.error = 'Failed to delete item. Please try again later.';
        }
      }
    },
    {{/if_has_params}}
    {{^if_has_params}}
    async deleteItemFromList(item) {
      if (window.confirm('Are you sure you want to delete this item?')) {
        try {
          await this.${{entity_name}}Service.delete(item.id);
          // Refresh the list
          this.data = this.data.filter((i) => i.id !== item.id);
        } catch (err) {
          console.error('Error deleting item:', err);
          this.error = 'Failed to delete item. Please try again later.';
        }
      }
    }
    {{/if_has_params}}
    {{/if_has_api}}
  }
};
{{/typescript}}
</script>

<style{{#scoped}} scoped{{/scoped}}{{#scss}} lang="scss"{{/scss}}>
.{{page_name_kebab}}-container {
  padding: 1rem;
  
  h1 {
    margin-bottom: 1rem;
  }
  
  .breadcrumb {
    display: flex;
    list-style: none;
    padding: 0.5rem 1rem;
    margin-bottom: 1rem;
    background-color: #f8f9fa;
    border-radius: 0.25rem;
    
    .breadcrumb-item {
      margin-right: 0.5rem;
      
      &:not(:last-child)::after {
        content: "/";
        margin-left: 0.5rem;
      }
      
      &.active {
        color: #6c757d;
      }
      
      a {
        color: #007bff;
        text-decoration: none;
        
        &:hover {
          text-decoration: underline;
        }
      }
    }
  }
  
  .loading-spinner {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 200px;
  }
  
  .error-message {
    padding: 1rem;
    background-color: #f8d7da;
    color: #721c24;
    border-radius: 0.25rem;
    margin-bottom: 1rem;
  }
  
  .content {
    background-color: #fff;
    border-radius: 0.25rem;
    padding: 1rem;
    
    .form-group {
      margin-bottom: 1rem;
      
      label {
        display: block;
        margin-bottom: 0.5rem;
      }
      
      input, textarea {
        width: 100%;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
      }
    }
    
    .form-actions {
      display: flex;
      gap: 0.5rem;
      margin-top: 1rem;
    }
    
    .btn {
      display: inline-block;
      font-weight: 400;
      text-align: center;
      white-space: nowrap;
      vertical-align: middle;
      user-select: none;
      border: 1px solid transparent;
      padding: 0.375rem 0.75rem;
      font-size: 1rem;
      line-height: 1.5;
      border-radius: 0.25rem;
      cursor: pointer;
      
      &.btn-primary {
        background-color: #007bff;
        color: #fff;
        
        &:hover {
          background-color: #0069d9;
        }
      }
      
      &.btn-secondary {
        background-color: #6c757d;
        color: #fff;
        
        &:hover {
          background-color: #5a6268;
        }
      }
      
      &.btn-danger {
        background-color: #dc3545;
        color: #fff;
        
        &:hover {
          background-color: #c82333;
        }
      }
      
      &.btn-info {
        background-color: #17a2b8;
        color: #fff;
        
        &:hover {
          background-color: #138496;
        }
      }
      
      &.btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
      }
    }
    
    .table {
      width: 100%;
      margin-bottom: 1rem;
      border-collapse: collapse;
      
      th, td {
        padding: 0.75rem;
        border-top: 1px solid #dee2e6;
        text-align: left;
      }
      
      thead th {
        border-bottom: 2px solid #dee2e6;
      }
    }
    
    .no-data {
      padding: 2rem;
      text-align: center;
      color: #6c757d;
    }
    
    .data-details {
      h2 {
        margin-top: 0;
        margin-bottom: 1rem;
      }
      
      p {
        margin-bottom: 1rem;
      }
      
      .action-buttons {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
      }
    }
    
    .list-actions {
      margin-bottom: 1rem;
    }
  }
}
</style>
