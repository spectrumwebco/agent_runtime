<template>
  <div class="{{component_name | kebab}}">
    <h2>{{ title }}</h2>
    {{#if_has_description}}
    <p class="description">{{ description }}</p>
    {{/if_has_description}}
    {{#if_has_items}}
    <ul class="items">
      <li v-for="item in items" :key="item.id" class="item">
        {{ item.name }}
      </li>
    </ul>
    {{/if_has_items}}
    {{#if_has_button}}
    <button @click="handleClick" class="btn">{{ buttonText }}</button>
    {{/if_has_button}}
    <slot></slot>
  </div>
</template>

<script{{#typescript}} lang="ts"{{/typescript}}>
{{#typescript}}
import { defineComponent } from 'vue';

{{#if_has_items}}
interface Item {
  id: string | number;
  name: string;
  [key: string]: any;
}
{{/if_has_items}}

export default defineComponent({
  name: '{{component_name}}',
  props: {
    title: {
      type: String,
      required: true
    },
    {{#if_has_description}}
    description: {
      type: String,
      default: ''
    },
    {{/if_has_description}}
    {{#if_has_items}}
    items: {
      type: Array as () => Item[],
      default: () => []
    },
    {{/if_has_items}}
    {{#if_has_button}}
    buttonText: {
      type: String,
      default: 'Click me'
    }
    {{/if_has_button}}
  },
  setup(props, { emit }) {
    const handleClick = () => {
      emit('click');
    };

    return {
      handleClick
    };
  }
});
{{/typescript}}
{{^typescript}}
export default {
  name: '{{component_name}}',
  props: {
    title: {
      type: String,
      required: true
    },
    {{#if_has_description}}
    description: {
      type: String,
      default: ''
    },
    {{/if_has_description}}
    {{#if_has_items}}
    items: {
      type: Array,
      default: () => []
    },
    {{/if_has_items}}
    {{#if_has_button}}
    buttonText: {
      type: String,
      default: 'Click me'
    }
    {{/if_has_button}}
  },
  methods: {
    handleClick() {
      this.$emit('click');
    }
  }
}
{{/typescript}}
</script>

<style{{#scoped}} scoped{{/scoped}}{{#scss}} lang="scss"{{/scss}}>
.{{component_name | kebab}} {
  padding: 1rem;
  margin-bottom: 1rem;
  border-radius: 0.25rem;
  background-color: #f8f9fa;
  
  h2 {
    margin-top: 0;
    margin-bottom: 1rem;
    font-size: 1.5rem;
    color: #212529;
  }
  
  {{#if_has_description}}
  .description {
    margin-bottom: 1rem;
    color: #6c757d;
  }
  {{/if_has_description}}
  
  {{#if_has_items}}
  .items {
    list-style: none;
    padding: 0;
    margin: 0 0 1rem 0;
    
    .item {
      padding: 0.5rem;
      border-bottom: 1px solid #dee2e6;
      
      &:last-child {
        border-bottom: none;
      }
    }
  }
  {{/if_has_items}}
  
  {{#if_has_button}}
  .btn {
    display: inline-block;
    font-weight: 400;
    text-align: center;
    white-space: nowrap;
    vertical-align: middle;
    user-select: none;
    border: 1px solid transparent;
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
    line-height: 1.5;
    border-radius: 0.25rem;
    background-color: #007bff;
    color: #fff;
    cursor: pointer;
    transition: background-color 0.15s ease-in-out;
    
    &:hover {
      background-color: #0069d9;
    }
    
    &:focus {
      outline: 0;
      box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
  }
  {{/if_has_button}}
}
</style>
