# {{project_name}}

A Django project generated by Rumble.

## Features

- Modern Django project structure
- Ready-to-use authentication system
- Database configuration with SQLite (easily switchable to PostgreSQL, MySQL, etc.)
- Static and media files configuration
{{#rest_framework}}
- REST API with Django REST Framework
{{/rest_framework}}
{{#cors_headers}}
- Cross-Origin Resource Sharing (CORS) support
{{/cors_headers}}

## Prerequisites

- Python 3.8+
- pip (Python package manager)
- virtualenv or venv (recommended)

## Installation

1. Clone the repository:
```bash
git clone <repository-url>
cd {{project_name}}
```

2. Create and activate a virtual environment:
```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

3. Install dependencies:
```bash
pip install -r requirements.txt
```

4. Apply migrations:
```bash
python manage.py migrate
```

5. Create a superuser:
```bash
python manage.py createsuperuser
```

6. Run the development server:
```bash
python manage.py runserver
```

The application will be available at http://127.0.0.1:8000/

## Project Structure

```
{{project_name}}/
├── {{project_name}}/          # Project configuration
│   ├── __init__.py
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── app1/                      # Django app
│   ├── migrations/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── static/                    # Static files
│   ├── css/
│   ├── js/
│   └── images/
├── templates/                 # HTML templates
│   ├── base.html
│   └── app1/
├── media/                     # User-uploaded files
├── manage.py                  # Django management script
├── requirements.txt           # Project dependencies
└── README.md                  # This file
```

## Development

### Creating a New App

```bash
python manage.py startapp app_name
```

Don't forget to add your new app to `INSTALLED_APPS` in `settings.py`.

### Running Tests

```bash
python manage.py test
```

### Creating Migrations

```bash
python manage.py makemigrations
python manage.py migrate
```

## Deployment

### Production Settings

Before deploying to production, make sure to:

1. Set `DEBUG = False` in settings.py
2. Configure a proper `SECRET_KEY`
3. Update `ALLOWED_HOSTS`
4. Set up a production database
5. Configure static files serving

### Deployment Options

- **Heroku**: Use a Procfile and runtime.txt
- **Docker**: Use the provided Dockerfile and docker-compose.yml
- **AWS/GCP/Azure**: Follow cloud-specific Django deployment guides
- **Traditional hosting**: Set up with Gunicorn/uWSGI and Nginx

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Acknowledgments

- Django - https://www.djangoproject.com/
{{#rest_framework}}
- Django REST Framework - https://www.django-rest-framework.org/
{{/rest_framework}}
- Rumble
