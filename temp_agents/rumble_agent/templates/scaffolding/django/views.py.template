"""
Views for {{project_name}} project.

Generated by Rumble.
"""

from django.shortcuts import render, get_object_or_404, redirect
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse_lazy
from django.http import JsonResponse
{{#rest_framework}}
from rest_framework import viewsets, permissions, status
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework.views import APIView

from .serializers import CategorySerializer, ItemSerializer
{{/rest_framework}}
from .models import Category, Item

# Function-based views example
def home(request):
    """Home page view."""
    items = Item.objects.filter(is_active=True).order_by('-published_date')[:5]
    categories = Category.objects.all()
    
    context = {
        'items': items,
        'categories': categories,
    }
    
    return render(request, 'home.html', context)

def item_detail(request, slug):
    """Item detail view."""
    item = get_object_or_404(Item, slug=slug, is_active=True)
    
    context = {
        'item': item,
    }
    
    return render(request, 'item_detail.html', context)

# Class-based views example
class ItemListView(ListView):
    """Item list view."""
    model = Item
    template_name = 'item_list.html'
    context_object_name = 'items'
    paginate_by = 10
    
    def get_queryset(self):
        return Item.objects.filter(is_active=True).order_by('-published_date')

class ItemDetailView(DetailView):
    """Item detail view."""
    model = Item
    template_name = 'item_detail.html'
    context_object_name = 'item'
    slug_url_kwarg = 'slug'
    
    def get_queryset(self):
        return Item.objects.filter(is_active=True)

class ItemCreateView(LoginRequiredMixin, CreateView):
    """Item create view."""
    model = Item
    template_name = 'item_form.html'
    fields = ['title', 'description', 'category']
    success_url = reverse_lazy('item-list')
    
    def form_valid(self, form):
        form.instance.user = self.request.user
        return super().form_valid(form)

class ItemUpdateView(LoginRequiredMixin, UpdateView):
    """Item update view."""
    model = Item
    template_name = 'item_form.html'
    fields = ['title', 'description', 'category', 'is_active']
    slug_url_kwarg = 'slug'
    
    def get_success_url(self):
        return reverse_lazy('item-detail', kwargs={'slug': self.object.slug})
    
    def get_queryset(self):
        return Item.objects.filter(user=self.request.user)

class ItemDeleteView(LoginRequiredMixin, DeleteView):
    """Item delete view."""
    model = Item
    template_name = 'item_confirm_delete.html'
    success_url = reverse_lazy('item-list')
    slug_url_kwarg = 'slug'
    
    def get_queryset(self):
        return Item.objects.filter(user=self.request.user)

{{#rest_framework}}
# REST API views example
class CategoryViewSet(viewsets.ModelViewSet):
    """API endpoint for categories."""
    queryset = Category.objects.all()
    serializer_class = CategorySerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

class ItemViewSet(viewsets.ModelViewSet):
    """API endpoint for items."""
    queryset = Item.objects.filter(is_active=True)
    serializer_class = ItemSerializer
    permission_classes = [permissions.IsAuthenticated]
    
    def perform_create(self, serializer):
        serializer.save(user=self.request.user)
    
    def get_queryset(self):
        """Filter items by user if requested."""
        queryset = Item.objects.filter(is_active=True)
        user_id = self.request.query_params.get('user', None)
        if user_id is not None:
            queryset = queryset.filter(user__id=user_id)
        return queryset

@api_view(['GET'])
def api_root(request):
    """API root endpoint."""
    return Response({
        'categories': reverse_lazy('category-list', request=request),
        'items': reverse_lazy('item-list', request=request),
    })
{{/rest_framework}}

# Add your views here
