"""
Flask application for {{project_name}}.

Generated by Rumble.
"""

import os
from flask import Flask, jsonify, request, render_template
from flask_cors import CORS
from dotenv import load_dotenv
{{#sqlalchemy}}
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
{{/sqlalchemy}}
{{#jwt}}
from flask_jwt_extended import JWTManager, jwt_required, create_access_token, get_jwt_identity
{{/jwt}}

# Load environment variables
load_dotenv()

# Initialize Flask app
app = Flask(__name__)
app.config.from_object('config.Config')

# Enable CORS
CORS(app, resources={r"/api/*": {"origins": "*"}})

{{#sqlalchemy}}
# Initialize database
db = SQLAlchemy(app)
migrate = Migrate(app, db)

# Import models
from models import User, Item
{{/sqlalchemy}}

{{#jwt}}
# Initialize JWT
jwt = JWTManager(app)
{{/jwt}}

# Routes
@app.route('/')
def index():
    """Render the index page."""
    return render_template('index.html')

@app.route('/api/health')
def health_check():
    """API health check endpoint."""
    return jsonify({"status": "healthy", "version": "1.0.0"})

{{#jwt}}
@app.route('/api/login', methods=['POST'])
def login():
    """User login endpoint."""
    if not request.is_json:
        return jsonify({"error": "Missing JSON in request"}), 400
    
    username = request.json.get('username', None)
    password = request.json.get('password', None)
    
    if not username or not password:
        return jsonify({"error": "Missing username or password"}), 400
    
    # In a real app, you would validate against your database
    if username != 'test' or password != 'test':
        return jsonify({"error": "Invalid username or password"}), 401
    
    # Create access token
    access_token = create_access_token(identity=username)
    return jsonify({"access_token": access_token}), 200

@app.route('/api/protected', methods=['GET'])
@jwt_required()
def protected():
    """Protected endpoint requiring JWT authentication."""
    current_user = get_jwt_identity()
    return jsonify({"logged_in_as": current_user}), 200
{{/jwt}}

{{#sqlalchemy}}
@app.route('/api/items', methods=['GET'])
def get_items():
    """Get all items endpoint."""
    items = Item.query.all()
    return jsonify([item.to_dict() for item in items]), 200

@app.route('/api/items/<int:item_id>', methods=['GET'])
def get_item(item_id):
    """Get a specific item endpoint."""
    item = Item.query.get_or_404(item_id)
    return jsonify(item.to_dict()), 200

@app.route('/api/items', methods=['POST'])
def create_item():
    """Create a new item endpoint."""
    if not request.is_json:
        return jsonify({"error": "Missing JSON in request"}), 400
    
    data = request.json
    if 'name' not in data:
        return jsonify({"error": "Missing name parameter"}), 400
    
    item = Item(name=data['name'], description=data.get('description', ''))
    db.session.add(item)
    db.session.commit()
    
    return jsonify(item.to_dict()), 201

@app.route('/api/items/<int:item_id>', methods=['PUT'])
def update_item(item_id):
    """Update an existing item endpoint."""
    if not request.is_json:
        return jsonify({"error": "Missing JSON in request"}), 400
    
    item = Item.query.get_or_404(item_id)
    data = request.json
    
    if 'name' in data:
        item.name = data['name']
    if 'description' in data:
        item.description = data['description']
    
    db.session.commit()
    
    return jsonify(item.to_dict()), 200

@app.route('/api/items/<int:item_id>', methods=['DELETE'])
def delete_item(item_id):
    """Delete an item endpoint."""
    item = Item.query.get_or_404(item_id)
    db.session.delete(item)
    db.session.commit()
    
    return jsonify({"message": "Item deleted"}), 200
{{/sqlalchemy}}

# Error handlers
@app.errorhandler(404)
def not_found(error):
    """Handle 404 errors."""
    return jsonify({"error": "Not found"}), 404

@app.errorhandler(500)
def server_error(error):
    """Handle 500 errors."""
    return jsonify({"error": "Server error"}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)), debug=True)
