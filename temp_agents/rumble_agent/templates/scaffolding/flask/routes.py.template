"""
Routes for {{project_name}} Flask application.

Generated by Rumble.
"""

from flask import Blueprint, jsonify, request, render_template
{{#jwt}}
from flask_jwt_extended import jwt_required, get_jwt_identity
{{/jwt}}
{{#sqlalchemy}}
from models import db, User, Item
{{/sqlalchemy}}

# Create blueprint
api = Blueprint('api', __name__, url_prefix='/api')
main = Blueprint('main', __name__)

# Main routes
@main.route('/')
def index():
    """Render the index page."""
    return render_template('index.html')

@main.route('/about')
def about():
    """Render the about page."""
    return render_template('about.html')

# API routes
@api.route('/health')
def health_check():
    """API health check endpoint."""
    return jsonify({"status": "healthy", "version": "1.0.0"})

{{#sqlalchemy}}
# Item routes
@api.route('/items', methods=['GET'])
def get_items():
    """Get all items endpoint."""
    items = Item.query.all()
    return jsonify([{
        'id': item.id,
        'name': item.name,
        'description': item.description,
        'is_active': item.is_active,
        'created_at': item.created_at.isoformat(),
        'user_id': item.user_id
    } for item in items]), 200

@api.route('/items/<int:item_id>', methods=['GET'])
def get_item(item_id):
    """Get a specific item endpoint."""
    item = Item.query.get_or_404(item_id)
    return jsonify({
        'id': item.id,
        'name': item.name,
        'description': item.description,
        'is_active': item.is_active,
        'created_at': item.created_at.isoformat(),
        'user_id': item.user_id
    }), 200

@api.route('/items', methods=['POST'])
{{#jwt}}
@jwt_required()
{{/jwt}}
def create_item():
    """Create a new item endpoint."""
    if not request.is_json:
        return jsonify({"error": "Missing JSON in request"}), 400
    
    data = request.json
    if 'name' not in data:
        return jsonify({"error": "Missing name parameter"}), 400
    
    {{#jwt}}
    current_user_id = get_jwt_identity()
    {{/jwt}}
    {{^jwt}}
    # In a real app, you would get the user ID from the authenticated user
    current_user_id = 1
    {{/jwt}}
    
    item = Item(
        name=data['name'],
        description=data.get('description', ''),
        user_id=current_user_id
    )
    db.session.add(item)
    db.session.commit()
    
    return jsonify({
        'id': item.id,
        'name': item.name,
        'description': item.description,
        'is_active': item.is_active,
        'created_at': item.created_at.isoformat(),
        'user_id': item.user_id
    }), 201

@api.route('/items/<int:item_id>', methods=['PUT'])
{{#jwt}}
@jwt_required()
{{/jwt}}
def update_item(item_id):
    """Update an existing item endpoint."""
    if not request.is_json:
        return jsonify({"error": "Missing JSON in request"}), 400
    
    item = Item.query.get_or_404(item_id)
    
    {{#jwt}}
    current_user_id = get_jwt_identity()
    if item.user_id != current_user_id:
        return jsonify({"error": "Not authorized"}), 403
    {{/jwt}}
    
    data = request.json
    
    if 'name' in data:
        item.name = data['name']
    if 'description' in data:
        item.description = data['description']
    if 'is_active' in data:
        item.is_active = data['is_active']
    
    db.session.commit()
    
    return jsonify({
        'id': item.id,
        'name': item.name,
        'description': item.description,
        'is_active': item.is_active,
        'created_at': item.created_at.isoformat(),
        'user_id': item.user_id
    }), 200

@api.route('/items/<int:item_id>', methods=['DELETE'])
{{#jwt}}
@jwt_required()
{{/jwt}}
def delete_item(item_id):
    """Delete an item endpoint."""
    item = Item.query.get_or_404(item_id)
    
    {{#jwt}}
    current_user_id = get_jwt_identity()
    if item.user_id != current_user_id:
        return jsonify({"error": "Not authorized"}), 403
    {{/jwt}}
    
    db.session.delete(item)
    db.session.commit()
    
    return jsonify({"message": "Item deleted"}), 200
{{/sqlalchemy}}

{{#jwt}}
# User routes
@api.route('/login', methods=['POST'])
def login():
    """User login endpoint."""
    if not request.is_json:
        return jsonify({"error": "Missing JSON in request"}), 400
    
    username = request.json.get('username', None)
    password = request.json.get('password', None)
    
    if not username or not password:
        return jsonify({"error": "Missing username or password"}), 400
    
    {{#sqlalchemy}}
    user = User.query.filter_by(username=username).first()
    if not user or not user.check_password(password):
        return jsonify({"error": "Invalid username or password"}), 401
    
    from flask_jwt_extended import create_access_token
    access_token = create_access_token(identity=user.id)
    {{/sqlalchemy}}
    {{^sqlalchemy}}
    # In a real app, you would validate against your database
    if username != 'test' or password != 'test':
        return jsonify({"error": "Invalid username or password"}), 401
    
    from flask_jwt_extended import create_access_token
    access_token = create_access_token(identity=1)  # User ID 1
    {{/sqlalchemy}}
    
    return jsonify({"access_token": access_token}), 200

@api.route('/profile', methods=['GET'])
@jwt_required()
def profile():
    """User profile endpoint."""
    current_user_id = get_jwt_identity()
    
    {{#sqlalchemy}}
    user = User.query.get_or_404(current_user_id)
    return jsonify({
        'id': user.id,
        'username': user.username,
        'email': user.email,
        'created_at': user.created_at.isoformat()
    }), 200
    {{/sqlalchemy}}
    {{^sqlalchemy}}
    # In a real app, you would get the user from the database
    return jsonify({
        'id': current_user_id,
        'username': 'test_user',
        'email': 'test@example.com'
    }), 200
    {{/sqlalchemy}}
{{/jwt}}

# Error handlers
@api.errorhandler(404)
def not_found(error):
    """Handle 404 errors."""
    return jsonify({"error": "Not found"}), 404

@api.errorhandler(500)
def server_error(error):
    """Handle 500 errors."""
    return jsonify({"error": "Server error"}), 500

# Register blueprints
def register_blueprints(app):
    """Register all blueprints with the app."""
    app.register_blueprint(main)
    app.register_blueprint(api)
    
    return app
