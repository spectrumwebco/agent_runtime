# {{project_name}}

A Flask project generated by Rumble.

## Features

- Modern Flask project structure
- Configuration management with environment variables
- Blueprints for modular application design
- Error handling and logging
{{#sqlalchemy}}
- Database integration with SQLAlchemy
- Database migrations with Flask-Migrate
{{/sqlalchemy}}
{{#jwt}}
- Authentication with JWT
{{/jwt}}
{{#cors}}
- Cross-Origin Resource Sharing (CORS) support
{{/cors}}

## Prerequisites

- Python 3.8+
- pip (Python package manager)
- virtualenv or venv (recommended)

## Installation

1. Clone the repository:
```bash
git clone <repository-url>
cd {{project_name}}
```

2. Create and activate a virtual environment:
```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

3. Install dependencies:
```bash
pip install -r requirements.txt
```

4. Set up environment variables:
```bash
cp .env.example .env
# Edit .env with your configuration
```

{{#sqlalchemy}}
5. Initialize the database:
```bash
flask db init
flask db migrate -m "Initial migration"
flask db upgrade
```
{{/sqlalchemy}}

6. Run the development server:
```bash
flask run
```

The application will be available at http://127.0.0.1:5000/

## Project Structure

```
{{project_name}}/
├── app.py                  # Application entry point
├── config.py               # Configuration settings
├── routes.py               # Route definitions
{{#sqlalchemy}}
├── models.py               # Database models
{{/sqlalchemy}}
├── static/                 # Static files
│   ├── css/
│   ├── js/
│   └── images/
├── templates/              # HTML templates
│   ├── base.html
│   ├── index.html
│   └── about.html
├── .env                    # Environment variables
├── .env.example            # Example environment variables
├── requirements.txt        # Project dependencies
└── README.md               # This file
```

## Development

### Project Organization

This project follows a blueprint-based organization:

- `app.py`: Application entry point and configuration
- `config.py`: Configuration classes for different environments
- `routes.py`: Route definitions using blueprints
{{#sqlalchemy}}
- `models.py`: SQLAlchemy models
{{/sqlalchemy}}

### Running Tests

```bash
pytest
```

{{#sqlalchemy}}
### Database Migrations

When you make changes to your models, create a new migration:

```bash
flask db migrate -m "Description of changes"
flask db upgrade
```
{{/sqlalchemy}}

## API Endpoints

The API is available at `/api`:

- `GET /api/health`: Health check endpoint
{{#sqlalchemy}}
- `GET /api/items`: Get all items
- `GET /api/items/<id>`: Get a specific item
- `POST /api/items`: Create a new item
- `PUT /api/items/<id>`: Update an item
- `DELETE /api/items/<id>`: Delete an item
{{/sqlalchemy}}
{{#jwt}}
- `POST /api/login`: User login
- `GET /api/profile`: Get user profile (requires authentication)
{{/jwt}}

## Deployment

### Production Settings

Before deploying to production, make sure to:

1. Set the environment to `production` in `.env`
2. Configure a proper `SECRET_KEY`
3. Set up a production database
4. Configure logging

### Deployment Options

- **Heroku**: Use a Procfile and runtime.txt
- **Docker**: Use the provided Dockerfile and docker-compose.yml
- **AWS/GCP/Azure**: Follow cloud-specific Flask deployment guides
- **Traditional hosting**: Set up with Gunicorn and Nginx

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Acknowledgments

- Flask - https://flask.palletsprojects.com/
{{#sqlalchemy}}
- SQLAlchemy - https://www.sqlalchemy.org/
{{/sqlalchemy}}
{{#jwt}}
- Flask-JWT-Extended - https://flask-jwt-extended.readthedocs.io/
{{/jwt}}
- Rumble
