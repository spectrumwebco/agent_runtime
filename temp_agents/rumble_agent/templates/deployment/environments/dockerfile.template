# Dockerfile for {{project_name}}
# Generated by Rumble

{{#node}}
# Base image
FROM node:{{#node_version}}{{.}}{{/node_version}}{{^node_version}}18-alpine{{/node_version}} AS base

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
{{#pnpm}}
COPY pnpm-lock.yaml ./

# Install pnpm
RUN npm install -g pnpm@{{#pnpm_version}}{{.}}{{/pnpm_version}}{{^pnpm_version}}8{{/pnpm_version}}

# Install dependencies
RUN pnpm install {{#production}}--prod{{/production}}
{{/pnpm}}
{{#yarn}}
COPY yarn.lock ./

# Install dependencies
RUN yarn install {{#production}}--production{{/production}} {{#frozen_lockfile}}--frozen-lockfile{{/frozen_lockfile}}
{{/yarn}}
{{^pnpm}}{{^yarn}}
# Install dependencies
RUN npm ci {{#production}}--only=production{{/production}}
{{/yarn}}{{/pnpm}}

# Copy source code
COPY . .

{{#build}}
# Build stage
FROM base AS build

# Build the application
RUN {{#build_command}}{{.}}{{/build_command}}{{^build_command}}npm run build{{/build_command}}

# Production stage
FROM node:{{#node_version}}{{.}}{{/node_version}}{{^node_version}}18-alpine{{/node_version}} AS production

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
{{#pnpm}}
COPY pnpm-lock.yaml ./

# Install pnpm
RUN npm install -g pnpm@{{#pnpm_version}}{{.}}{{/pnpm_version}}{{^pnpm_version}}8{{/pnpm_version}}

# Install production dependencies only
RUN pnpm install --prod
{{/pnpm}}
{{#yarn}}
COPY yarn.lock ./

# Install production dependencies only
RUN yarn install --production --frozen-lockfile
{{/yarn}}
{{^pnpm}}{{^yarn}}
# Install production dependencies only
RUN npm ci --only=production
{{/yarn}}{{/pnpm}}

# Copy built application from build stage
COPY --from=build /app/{{#dist_dir}}{{.}}{{/dist_dir}}{{^dist_dir}}dist{{/dist_dir}} ./{{#dist_dir}}{{.}}{{/dist_dir}}{{^dist_dir}}dist{{/dist_dir}}
{{#additional_files}}
COPY {{.}} ./{{.}}
{{/additional_files}}

# Set environment variables
ENV NODE_ENV=production
{{#env_vars}}
ENV {{name}}={{value}}
{{/env_vars}}

# Expose port
EXPOSE {{#port}}{{.}}{{/port}}{{^port}}3000{{/port}}

# Start the application
CMD ["{{#start_command}}{{.}}{{/start_command}}{{^start_command}}node dist/server.js{{/start_command}}"]
{{/build}}
{{^build}}
# Set environment variables
ENV NODE_ENV={{#node_env}}{{.}}{{/node_env}}{{^node_env}}production{{/node_env}}
{{#env_vars}}
ENV {{name}}={{value}}
{{/env_vars}}

# Expose port
EXPOSE {{#port}}{{.}}{{/port}}{{^port}}3000{{/port}}

# Start the application
CMD ["{{#start_command}}{{.}}{{/start_command}}{{^start_command}}npm start{{/start_command}}"]
{{/build}}
{{/node}}

{{#python}}
# Base image
FROM python:{{#python_version}}{{.}}{{/python_version}}{{^python_version}}3.11-slim{{/python_version}} AS base

# Set working directory
WORKDIR /app

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    {{#system_dependencies}}
    {{.}} \
    {{/system_dependencies}}
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
{{#poetry}}
COPY pyproject.toml poetry.lock* ./

# Install poetry
RUN pip install poetry && \
    poetry config virtualenvs.create false

# Install dependencies
RUN poetry install {{#production}}--no-dev{{/production}} --no-interaction --no-ansi
{{/poetry}}
{{^poetry}}
COPY requirements*.txt ./

# Install dependencies
RUN pip install -r {{#requirements_file}}{{.}}{{/requirements_file}}{{^requirements_file}}requirements.txt{{/requirements_file}}
{{/poetry}}

# Copy source code
COPY . .

{{#django}}
# Collect static files
RUN python manage.py collectstatic --noinput

# Run migrations
RUN python manage.py migrate
{{/django}}

# Set environment variables
{{#env_vars}}
ENV {{name}}={{value}}
{{/env_vars}}

# Expose port
EXPOSE {{#port}}{{.}}{{/port}}{{^port}}8000{{/port}}

# Start the application
{{#django}}
CMD ["gunicorn", "{{project_name}}.wsgi:application", "--bind", "0.0.0.0:{{#port}}{{.}}{{/port}}{{^port}}8000{{/port}}"]
{{/django}}
{{#flask}}
CMD ["gunicorn", "{{#app_module}}{{.}}{{/app_module}}{{^app_module}}app:app{{/app_module}}", "--bind", "0.0.0.0:{{#port}}{{.}}{{/port}}{{^port}}8000{{/port}}"]
{{/flask}}
{{#fastapi}}
CMD ["uvicorn", "{{#app_module}}{{.}}{{/app_module}}{{^app_module}}app.main:app{{/app_module}}", "--host", "0.0.0.0", "--port", "{{#port}}{{.}}{{/port}}{{^port}}8000{{/port}}"]
{{/fastapi}}
{{^django}}{{^flask}}{{^fastapi}}
CMD ["python", "{{#start_script}}{{.}}{{/start_script}}{{^start_script}}app.py{{/start_script}}"]
{{/fastapi}}{{/flask}}{{/django}}
{{/python}}

{{#go}}
# Build stage
FROM golang:{{#go_version}}{{.}}{{/go_version}}{{^go_version}}1.21-alpine{{/go_version}} AS build

# Set working directory
WORKDIR /app

# Copy go.mod and go.sum
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -o /app/bin/{{project_name}} {{#main_package}}{{.}}{{/main_package}}{{^main_package}}./cmd/{{project_name}}{{/main_package}}

# Final stage
FROM alpine:{{#alpine_version}}{{.}}{{/alpine_version}}{{^alpine_version}}3.18{{/alpine_version}}

# Set working directory
WORKDIR /app

# Install CA certificates
RUN apk --no-cache add ca-certificates

# Copy the binary from the build stage
COPY --from=build /app/bin/{{project_name}} /app/{{project_name}}

# Copy configuration files
{{#config_files}}
COPY --from=build /app/{{.}} /app/{{.}}
{{/config_files}}

# Set environment variables
{{#env_vars}}
ENV {{name}}={{value}}
{{/env_vars}}

# Expose port
EXPOSE {{#port}}{{.}}{{/port}}{{^port}}8080{{/port}}

# Run the application
CMD ["/app/{{project_name}}"]
{{/go}}

{{#rust}}
# Build stage
FROM rust:{{#rust_version}}{{.}}{{/rust_version}}{{^rust_version}}1.70-slim{{/rust_version}} AS build

# Set working directory
WORKDIR /app

# Copy Cargo files
COPY Cargo.toml Cargo.lock ./

# Create dummy source file to build dependencies
RUN mkdir -p src && \
    echo "fn main() {}" > src/main.rs

# Build dependencies
RUN cargo build {{#release}}--release{{/release}}

# Remove the dummy source file
RUN rm -rf src

# Copy source code
COPY . .

# Build the application
RUN cargo build {{#release}}--release{{/release}}

# Final stage
FROM debian:{{#debian_version}}{{.}}{{/debian_version}}{{^debian_version}}bullseye-slim{{/debian_version}}

# Set working directory
WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    {{#system_dependencies}}
    {{.}} \
    {{/system_dependencies}}
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy the binary from the build stage
COPY --from=build /app/target/{{#release}}release{{/release}}{{^release}}debug{{/release}}/{{project_name}} /app/{{project_name}}

# Copy configuration files
{{#config_files}}
COPY --from=build /app/{{.}} /app/{{.}}
{{/config_files}}

# Set environment variables
{{#env_vars}}
ENV {{name}}={{value}}
{{/env_vars}}

# Expose port
EXPOSE {{#port}}{{.}}{{/port}}{{^port}}8080{{/port}}

# Run the application
CMD ["/app/{{project_name}}"]
{{/rust}}

{{#java}}
# Build stage
FROM maven:{{#maven_version}}{{.}}{{/maven_version}}{{^maven_version}}3.9-eclipse-temurin-17{{/maven_version}} AS build

# Set working directory
WORKDIR /app

# Copy pom.xml
COPY pom.xml ./

# Download dependencies
RUN mvn dependency:go-offline -B

# Copy source code
COPY src ./src

# Build the application
RUN mvn package -DskipTests

# Final stage
FROM eclipse-temurin:{{#java_version}}{{.}}{{/java_version}}{{^java_version}}17-jre-alpine{{/java_version}}

# Set working directory
WORKDIR /app

# Copy the JAR file from the build stage
COPY --from=build /app/target/*.jar /app/app.jar

# Set environment variables
{{#env_vars}}
ENV {{name}}={{value}}
{{/env_vars}}

# Expose port
EXPOSE {{#port}}{{.}}{{/port}}{{^port}}8080{{/port}}

# Run the application
CMD ["java", "-jar", "/app/app.jar"]
{{/java}}

{{#php}}
# Base image
FROM php:{{#php_version}}{{.}}{{/php_version}}{{^php_version}}8.2-fpm-alpine{{/php_version}}

# Set working directory
WORKDIR /var/www/html

# Install system dependencies
RUN apk add --no-cache \
    nginx \
    {{#system_dependencies}}
    {{.}} \
    {{/system_dependencies}}

# Install PHP extensions
RUN docker-php-ext-install \
    pdo_mysql \
    {{#php_extensions}}
    {{.}} \
    {{/php_extensions}}

{{#composer}}
# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Copy composer files
COPY composer.json composer.lock ./

# Install dependencies
RUN composer install {{#production}}--no-dev{{/production}} --optimize-autoloader --no-interaction --no-progress
{{/composer}}

# Copy source code
COPY . .

# Configure Nginx
COPY {{#nginx_conf}}{{.}}{{/nginx_conf}}{{^nginx_conf}}docker/nginx/default.conf{{/nginx_conf}} /etc/nginx/http.d/default.conf

# Set permissions
RUN chown -R www-data:www-data /var/www/html \
    && chmod -R 755 /var/www/html/storage

# Set environment variables
{{#env_vars}}
ENV {{name}}={{value}}
{{/env_vars}}

# Expose port
EXPOSE {{#port}}{{.}}{{/port}}{{^port}}80{{/port}}

# Start Nginx and PHP-FPM
CMD ["sh", "-c", "nginx && php-fpm"]
{{/php}}

{{#dotnet}}
# Build stage
FROM mcr.microsoft.com/dotnet/sdk:{{#dotnet_version}}{{.}}{{/dotnet_version}}{{^dotnet_version}}7.0{{/dotnet_version}} AS build

# Set working directory
WORKDIR /app

# Copy csproj and restore dependencies
COPY *.csproj ./
RUN dotnet restore

# Copy source code
COPY . .

# Build the application
RUN dotnet publish -c Release -o out

# Final stage
FROM mcr.microsoft.com/dotnet/aspnet:{{#dotnet_version}}{{.}}{{/dotnet_version}}{{^dotnet_version}}7.0{{/dotnet_version}}

# Set working directory
WORKDIR /app

# Copy the build output from the build stage
COPY --from=build /app/out .

# Set environment variables
ENV ASPNETCORE_URLS=http://+:{{#port}}{{.}}{{/port}}{{^port}}80{{/port}}
{{#env_vars}}
ENV {{name}}={{value}}
{{/env_vars}}

# Expose port
EXPOSE {{#port}}{{.}}{{/port}}{{^port}}80{{/port}}

# Run the application
ENTRYPOINT ["dotnet", "{{project_name}}.dll"]
{{/dotnet}}

{{#multi_stage}}
# Multi-stage build with custom stages
{{#stages}}
# {{name}} stage
FROM {{base_image}} AS {{name}}

# Set working directory
WORKDIR {{#workdir}}{{.}}{{/workdir}}{{^workdir}}/app{{/workdir}}

{{#commands}}
{{.}}
{{/commands}}

{{/stages}}

# Final stage
FROM {{final_image}}

# Set working directory
WORKDIR {{#final_workdir}}{{.}}{{/final_workdir}}{{^final_workdir}}/app{{/final_workdir}}

{{#copy_from_stages}}
# Copy from {{stage}} stage
COPY --from={{stage}} {{source}} {{destination}}
{{/copy_from_stages}}

{{#final_commands}}
{{.}}
{{/final_commands}}

# Set environment variables
{{#env_vars}}
ENV {{name}}={{value}}
{{/env_vars}}

# Expose port
EXPOSE {{#port}}{{.}}{{/port}}{{^port}}8080{{/port}}

# Start command
CMD [{{#cmd}}{{.}}{{/cmd}}{{^cmd}}"app"{{/cmd}}]
{{/multi_stage}}
