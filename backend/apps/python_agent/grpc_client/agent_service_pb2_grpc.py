# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from backend.apps.python_agent.grpc_client import agent_service_pb2 as backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in backend/apps/python_agent/grpc_client/agent_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AgentServiceStub(object):
    """AgentService provides the interface for Django to interact with the Go runtime
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HealthCheck = channel.unary_unary(
                '/agent.AgentService/HealthCheck',
                request_serializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.HealthCheckResponse.FromString,
                _registered_method=True)
        self.ExecuteTask = channel.unary_unary(
                '/agent.AgentService/ExecuteTask',
                request_serializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.ExecuteTaskRequest.SerializeToString,
                response_deserializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.ExecuteTaskResponse.FromString,
                _registered_method=True)
        self.ExecuteAgentTask = channel.unary_unary(
                '/agent.AgentService/ExecuteAgentTask',
                request_serializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.ExecuteAgentTaskRequest.SerializeToString,
                response_deserializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.ExecuteAgentTaskResponse.FromString,
                _registered_method=True)
        self.GetState = channel.unary_unary(
                '/agent.AgentService/GetState',
                request_serializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.GetStateRequest.SerializeToString,
                response_deserializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.GetStateResponse.FromString,
                _registered_method=True)
        self.SetState = channel.unary_unary(
                '/agent.AgentService/SetState',
                request_serializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.SetStateRequest.SerializeToString,
                response_deserializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.SetStateResponse.FromString,
                _registered_method=True)
        self.DeleteState = channel.unary_unary(
                '/agent.AgentService/DeleteState',
                request_serializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.DeleteStateRequest.SerializeToString,
                response_deserializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.DeleteStateResponse.FromString,
                _registered_method=True)
        self.PublishEvent = channel.unary_unary(
                '/agent.AgentService/PublishEvent',
                request_serializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.PublishEventRequest.SerializeToString,
                response_deserializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.PublishEventResponse.FromString,
                _registered_method=True)
        self.SubscribeToEvents = channel.unary_stream(
                '/agent.AgentService/SubscribeToEvents',
                request_serializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.SubscribeToEventsRequest.SerializeToString,
                response_deserializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.EventMessage.FromString,
                _registered_method=True)


class AgentServiceServicer(object):
    """AgentService provides the interface for Django to interact with the Go runtime
    """

    def HealthCheck(self, request, context):
        """HealthCheck checks the health of the service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteTask(self, request, context):
        """ExecuteTask executes a task in the Go runtime
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteAgentTask(self, request, context):
        """ExecuteAgentTask executes a task using a specific agent in the multi-agent system
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetState(self, request, context):
        """GetState gets a value from the shared state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetState(self, request, context):
        """SetState sets a value in the shared state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteState(self, request, context):
        """DeleteState deletes a value from the shared state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishEvent(self, request, context):
        """PublishEvent publishes an event
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToEvents(self, request, context):
        """SubscribeToEvents subscribes to events of the specified types
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.HealthCheckResponse.SerializeToString,
            ),
            'ExecuteTask': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteTask,
                    request_deserializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.ExecuteTaskRequest.FromString,
                    response_serializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.ExecuteTaskResponse.SerializeToString,
            ),
            'ExecuteAgentTask': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteAgentTask,
                    request_deserializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.ExecuteAgentTaskRequest.FromString,
                    response_serializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.ExecuteAgentTaskResponse.SerializeToString,
            ),
            'GetState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetState,
                    request_deserializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.GetStateRequest.FromString,
                    response_serializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.GetStateResponse.SerializeToString,
            ),
            'SetState': grpc.unary_unary_rpc_method_handler(
                    servicer.SetState,
                    request_deserializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.SetStateRequest.FromString,
                    response_serializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.SetStateResponse.SerializeToString,
            ),
            'DeleteState': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteState,
                    request_deserializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.DeleteStateRequest.FromString,
                    response_serializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.DeleteStateResponse.SerializeToString,
            ),
            'PublishEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishEvent,
                    request_deserializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.PublishEventRequest.FromString,
                    response_serializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.PublishEventResponse.SerializeToString,
            ),
            'SubscribeToEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToEvents,
                    request_deserializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.SubscribeToEventsRequest.FromString,
                    response_serializer=backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.EventMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'agent.AgentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('agent.AgentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AgentService(object):
    """AgentService provides the interface for Django to interact with the Go runtime
    """

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/HealthCheck',
            backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.HealthCheckRequest.SerializeToString,
            backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/ExecuteTask',
            backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.ExecuteTaskRequest.SerializeToString,
            backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.ExecuteTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteAgentTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/ExecuteAgentTask',
            backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.ExecuteAgentTaskRequest.SerializeToString,
            backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.ExecuteAgentTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/GetState',
            backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.GetStateRequest.SerializeToString,
            backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.GetStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/SetState',
            backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.SetStateRequest.SerializeToString,
            backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.SetStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/DeleteState',
            backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.DeleteStateRequest.SerializeToString,
            backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.DeleteStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent.AgentService/PublishEvent',
            backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.PublishEventRequest.SerializeToString,
            backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.PublishEventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeToEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/agent.AgentService/SubscribeToEvents',
            backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.SubscribeToEventsRequest.SerializeToString,
            backend_dot_apps_dot_python__agent_dot_grpc__client_dot_agent__service__pb2.EventMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
