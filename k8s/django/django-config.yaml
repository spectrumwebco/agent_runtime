apiVersion: v1
kind: ConfigMap
metadata:
  name: django-config
  namespace: agent-runtime
  labels:
    app: django-backend
    component: backend
data:
  settings.py: |
    """
    Django settings for agent_api project.
    """
    import os
    from pathlib import Path
    from django.core.management.utils import get_random_secret_key

    BASE_DIR = Path(__file__).resolve().parent.parent

    SECRET_KEY = os.environ.get('SECRET_KEY', get_random_secret_key())

    DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

    ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '*').split(',')

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'rest_framework',
        'rest_framework.authtoken',
        'corsheaders',
        'channels',
        'drf_yasg',
        'api',
        'apps.app',
        'apps.python_agent',
        'apps.python_ml',
        'apps.tools',
    ]

    MIDDLEWARE = [
        'corsheaders.middleware.CorsMiddleware',
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    ROOT_URLCONF = 'agent_api.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR, 'templates')],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'agent_api.wsgi.application'
    ASGI_APPLICATION = 'agent_api.asgi.application'

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ.get('DB_NAME', 'agent_runtime'),
            'USER': os.environ.get('DB_USER', 'agent_runtime'),
            'PASSWORD': os.environ.get('DB_PASSWORD', 'agent_runtime'),
            'HOST': os.environ.get('DB_HOST', 'mariadb'),
            'PORT': os.environ.get('DB_PORT', '3306'),
            'OPTIONS': {
                'charset': 'utf8mb4',
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            },
        }
    }

    REDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                'hosts': [REDIS_URL],
            },
        },
    }

    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': REDIS_URL,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]

    LANGUAGE_CODE = 'en-us'
    TIME_ZONE = 'UTC'
    USE_I18N = True
    USE_TZ = True

    STATIC_URL = 'static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOW_CREDENTIALS = True

    REST_FRAMEWORK = {
        'DEFAULT_AUTHENTICATION_CLASSES': [
            'rest_framework.authentication.TokenAuthentication',
            'rest_framework.authentication.SessionAuthentication',
        ],
        'DEFAULT_PERMISSION_CLASSES': [
            'rest_framework.permissions.IsAuthenticated',
        ],
        'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
        'PAGE_SIZE': 10,
    }

    GITHUB_CLIENT_ID = os.environ.get('GITHUB_CLIENT_ID', '')
    GITHUB_CLIENT_SECRET = os.environ.get('GITHUB_CLIENT_SECRET', '')
    GITEE_CLIENT_ID = os.environ.get('GITEE_CLIENT_ID', '')
    GITEE_CLIENT_SECRET = os.environ.get('GITEE_CLIENT_SECRET', '')

    POLAR_API_KEY = os.environ.get('POLAR_API_KEY', '')

    DEVIN_API_URL = os.environ.get('DEVIN_API_URL', 'http://185.196.220.224:8000')
    DEVIN_API_KEY = os.environ.get('DEVIN_API_KEY', '')

    WORKSPACE_ROOT = os.environ.get('WORKSPACE_ROOT', '/app/workspaces')

    SWAGGER_SETTINGS = {
        'SECURITY_DEFINITIONS': {
            'Bearer': {
                'type': 'apiKey',
                'name': 'Authorization',
                'in': 'header'
            }
        },
        'USE_SESSION_AUTH': False,
        'PERSIST_AUTH': True,
        'REFETCH_SCHEMA_WITH_AUTH': True,
        'REFETCH_SCHEMA_ON_LOGOUT': True,
    }

  urls.py: |
    """
    URL configuration for agent_api project.
    """
    from django.contrib import admin
    from django.urls import path, include
    from django.conf import settings
    from django.conf.urls.static import static
    from api.swagger import urlpatterns as swagger_urls

    urlpatterns = [
        path('admin/', admin.site.urls),
        path('api/', include('api.urls')),
        path('api/app/', include('apps.app.urls')),
        path('api/agent/', include('apps.python_agent.urls')),
        path('api/ml/', include('apps.python_ml.urls')),
        path('api/tools/', include('apps.tools.urls')),
    ] + swagger_urls

    if settings.DEBUG:
        urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
