apiVersion: apps/v1
kind: Deployment
metadata:
  name: jupyterlab
  namespace: jupyter
  labels:
    app: jupyterlab
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jupyterlab
  template:
    metadata:
      labels:
        app: jupyterlab
    spec:
      containers:
      - name: jupyterlab
        image: jupyter/datascience-notebook:latest
        ports:
        - containerPort: 8888
        env:
        - name: JUPYTER_ENABLE_LAB
          value: "yes"
        - name: MLFLOW_TRACKING_URI
          value: "http://mlflow-server.mlflow.svc.cluster.local:5000"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: accesskey
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: secretkey
        - name: AWS_ENDPOINT_URL
          value: http://minio.minio.svc.cluster.local:9000
        - name: S3_USE_HTTPS
          value: "0"
        - name: S3_VERIFY_SSL
          value: "0"
        volumeMounts:
        - name: jupyter-data
          mountPath: /home/jovyan/work
        - name: jupyter-config
          mountPath: /home/jovyan/.jupyter
        resources:
          limits:
            cpu: "4"
            memory: 16Gi
            nvidia.com/gpu: "1"
          requests:
            cpu: "2"
            memory: 8Gi
        readinessProbe:
          httpGet:
            path: /lab
            port: 8888
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /lab
            port: 8888
          initialDelaySeconds: 60
          periodSeconds: 30
      volumes:
      - name: jupyter-data
        persistentVolumeClaim:
          claimName: jupyter-data-pvc
      - name: jupyter-config
        configMap:
          name: jupyter-config
---
apiVersion: v1
kind: Service
metadata:
  name: jupyterlab
  namespace: jupyter
spec:
  selector:
    app: jupyterlab
  ports:
  - port: 8888
    targetPort: 8888
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jupyterlab-ingress
  namespace: jupyter
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
spec:
  rules:
  - host: jupyter.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jupyterlab
            port:
              number: 8888
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jupyter-data-pvc
  namespace: jupyter
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jupyter-config
  namespace: jupyter
data:
  jupyter_notebook_config.py: |
    c.NotebookApp.ip = '0.0.0.0'
    c.NotebookApp.port = 8888
    c.NotebookApp.open_browser = False
    c.NotebookApp.allow_root = True
    c.NotebookApp.token = ''
    c.NotebookApp.password = ''
    c.NotebookApp.allow_origin = '*'
    c.NotebookApp.disable_check_xsrf = True
---
apiVersion: v1
kind: Namespace
metadata:
  name: jupyter
  labels:
    name: jupyter
