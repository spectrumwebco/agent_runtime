apiVersion: v1
kind: Namespace
metadata:
  name: jspolicy-system
  labels:
    app.kubernetes.io/name: jspolicy
    app.kubernetes.io/part-of: agent-runtime
    app.kubernetes.io/managed-by: terraform
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jspolicy-config
  namespace: jspolicy-system
  labels:
    app.kubernetes.io/name: jspolicy
    app.kubernetes.io/part-of: agent-runtime
data:
  config.yaml: |
    engine:
      image: ghcr.io/loft-sh/jspolicy-engine:0.3.0-beta.5
      imagePullPolicy: Always
    policies:
      defaultNamespace: jspolicy-system
    webhook:
      port: 9443
      timeoutSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jspolicy-controller
  namespace: jspolicy-system
  labels:
    app.kubernetes.io/name: jspolicy
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: agent-runtime
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: jspolicy
      app.kubernetes.io/component: controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: jspolicy
        app.kubernetes.io/component: controller
        app.kubernetes.io/part-of: agent-runtime
    spec:
      serviceAccountName: jspolicy-controller
      containers:
      - name: controller
        image: ghcr.io/loft-sh/jspolicy-controller:0.3.0-beta.5
        imagePullPolicy: Always
        args:
        - --config=/etc/jspolicy/config.yaml
        volumeMounts:
        - name: config
          mountPath: /etc/jspolicy
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
      volumes:
      - name: config
        configMap:
          name: jspolicy-config
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jspolicy-controller
  namespace: jspolicy-system
  labels:
    app.kubernetes.io/name: jspolicy
    app.kubernetes.io/part-of: agent-runtime
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jspolicy-controller
  labels:
    app.kubernetes.io/name: jspolicy
    app.kubernetes.io/part-of: agent-runtime
rules:
- apiGroups: [""]
  resources: ["namespaces", "pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets", "daemonsets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["validatingwebhookconfigurations", "mutatingwebhookconfigurations"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["jspolicy.com"]
  resources: ["policies", "policysets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jspolicy-controller
  labels:
    app.kubernetes.io/name: jspolicy
    app.kubernetes.io/part-of: agent-runtime
subjects:
- kind: ServiceAccount
  name: jspolicy-controller
  namespace: jspolicy-system
roleRef:
  kind: ClusterRole
  name: jspolicy-controller
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: jspolicy-webhook
  namespace: jspolicy-system
  labels:
    app.kubernetes.io/name: jspolicy
    app.kubernetes.io/component: webhook
    app.kubernetes.io/part-of: agent-runtime
spec:
  selector:
    app.kubernetes.io/name: jspolicy
    app.kubernetes.io/component: controller
  ports:
  - port: 443
    targetPort: 9443
    name: webhook
  type: ClusterIP
