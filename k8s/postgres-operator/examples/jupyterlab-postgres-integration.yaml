apiVersion: v1
kind: ConfigMap
metadata:
  name: jupyterlab-postgres-integration
  namespace: jupyter
data:
  jupyterlab-postgres-integration.sh: |
    
    
    until pg_isready -h ml-postgres-cluster.postgres-operator.svc.cluster.local -p 5432 -U jupyterlab; do
      echo "Waiting for PostgreSQL to be ready..."
      sleep 5
    done
    
    cat > /home/jovyan/.jupyter/postgres_connection.py << EOF
    import os
    import psycopg2
    
    def get_postgres_connection():
        """
        Returns a connection to the PostgreSQL database managed by the CrunchyData operator.
        """
        conn = psycopg2.connect(
            host="ml-postgres-cluster.postgres-operator.svc.cluster.local",
            port=5432,
            database="jupyterlab",
            user="jupyterlab",
            password=os.environ.get("JUPYTERLAB_DB_PASSWORD")
        )
        return conn
    
    def execute_query(query, params=None):
        """
        Executes a query on the PostgreSQL database.
        """
        conn = get_postgres_connection()
        try:
            cur = conn.cursor()
            cur.execute(query, params)
            conn.commit()
            return cur.fetchall()
        finally:
            conn.close()
    EOF
    
    mkdir -p /home/jovyan/work/examples
    cat > /home/jovyan/work/examples/postgres_example.ipynb << EOF
    {
     "cells": [
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "# PostgreSQL Integration Example\\n",
        "\\n",
        "This notebook demonstrates how to connect to the PostgreSQL database managed by the CrunchyData operator."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {},
       "source": [
        "import os\\n",
        "import pandas as pd\\n",
        "from postgres_connection import get_postgres_connection, execute_query"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "## Create a table for experiment tracking"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {},
       "source": [
        "create_table_query = \"\"\"\\n",
        "CREATE TABLE IF NOT EXISTS experiment_results (\\n",
        "    id SERIAL PRIMARY KEY,\\n",
        "    experiment_name VARCHAR(255) NOT NULL,\\n",
        "    model_type VARCHAR(100) NOT NULL,\\n",
        "    parameters JSONB NOT NULL,\\n",
        "    metrics JSONB NOT NULL,\\n",
        "    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\\n",
        ")\\n",
        "\"\"\"\\n",
        "\\n",
        "execute_query(create_table_query)"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "## Insert experiment results"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {},
       "source": [
        "import json\\n",
        "\\n",
        "# Example experiment results\\n",
        "experiment_name = \"llama4-fine-tuning\"\\n",
        "model_type = \"llama4-maverick\"\\n",
        "parameters = {\\n",
        "    \"learning_rate\": 0.001,\\n",
        "    \"batch_size\": 32,\\n",
        "    \"epochs\": 10,\\n",
        "    \"optimizer\": \"adam\"\\n",
        "}\\n",
        "metrics = {\\n",
        "    \"accuracy\": 0.92,\\n",
        "    \"loss\": 0.15,\\n",
        "    \"f1_score\": 0.91\\n",
        "}\\n",
        "\\n",
        "insert_query = \"\"\"\\n",
        "INSERT INTO experiment_results (experiment_name, model_type, parameters, metrics)\\n",
        "VALUES (%s, %s, %s, %s)\\n",
        "\"\"\"\\n",
        "\\n",
        "execute_query(insert_query, (\\n",
        "    experiment_name,\\n",
        "    model_type,\\n",
        "    json.dumps(parameters),\\n",
        "    json.dumps(metrics)\\n",
        "))"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "## Query experiment results"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {},
       "source": [
        "conn = get_postgres_connection()\\n",
        "query = \"SELECT * FROM experiment_results\"\\n",
        "df = pd.read_sql(query, conn)\\n",
        "conn.close()\\n",
        "\\n",
        "df"
       ]
      }
     ],
     "metadata": {
      "kernelspec": {
       "display_name": "Python 3",
       "language": "python",
       "name": "python3"
      },
      "language_info": {
       "codemirror_mode": {
        "name": "ipython",
        "version": 3
       },
       "file_extension": ".py",
       "mimetype": "text/x-python",
       "name": "python",
       "nbconvert_exporter": "python",
       "pygments_lexer": "ipython3",
       "version": "3.8.10"
      }
     },
     "nbformat": 4,
     "nbformat_minor": 4
    }
    EOF
    
    echo "JupyterLab PostgreSQL integration configured successfully"
---
apiVersion: v1
kind: Secret
metadata:
  name: jupyterlab-postgres-credentials
  namespace: jupyter
  annotations:
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/agent-inject-secret-jupyterlab-db: "database/creds/ml-app"
    vault.hashicorp.com/role: "jupyterlab"
    vault.hashicorp.com/agent-inject-template-jupyterlab-db: |
      {{- with secret "database/creds/ml-app" -}}
      export JUPYTERLAB_DB_PASSWORD="{{ .Data.password }}"
      {{- end -}}
type: Opaque
